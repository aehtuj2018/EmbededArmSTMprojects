
11_systick_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  4 .ARM          00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800036c  0800036c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010374  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010374  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000134b  00000000  00000000  000103a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003ee  00000000  00000000  000116ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00011ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000060  00000000  00000000  00011b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b199  00000000  00000000  00011bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011b8  00000000  00000000  0002cd71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000973c1  00000000  00000000  0002df29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c52ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000100  00000000  00000000  000c5340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000354 	.word	0x08000354

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000354 	.word	0x08000354

080001ec <start_conversion>:
	ADC1->CR2 |= CR2_ADON;
}


void start_conversion(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	/*Enable Continous conversion */
	ADC1->CR2 |= CR2_CONT;
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <start_conversion+0x28>)
 80001f2:	689b      	ldr	r3, [r3, #8]
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <start_conversion+0x28>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	6093      	str	r3, [r2, #8]
	/* start the ADC conversion */
	ADC1->CR2 |= CR2_SWSTART;
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <start_conversion+0x28>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <start_conversion+0x28>)
 8000202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000206:	6093      	str	r3, [r2, #8]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40012000 	.word	0x40012000

08000218 <main>:
#define PIN14			(1U<<14)

#define LED_PIN			PIN14

int main (void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	/* Enable clock access to GPIOG */

	RCC->AHB1ENR |= GPIOGEN;
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <main+0x44>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000220:	4a0e      	ldr	r2, [pc, #56]	; (800025c <main+0x44>)
 8000222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000226:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set PG14 as output pin */


	GPIOG->MODER |= (1U<<28);
 8000228:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <main+0x48>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a0c      	ldr	r2, [pc, #48]	; (8000260 <main+0x48>)
 800022e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(1u<<29);
 8000234:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <main+0x48>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a09      	ldr	r2, [pc, #36]	; (8000260 <main+0x48>)
 800023a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800023e:	6013      	str	r3, [r2, #0]

	start_conversion();
 8000240:	f7ff ffd4 	bl	80001ec <start_conversion>
	{


		//printf("A second just passed !!");

		GPIOG->ODR ^= LED_PIN;
 8000244:	4b06      	ldr	r3, [pc, #24]	; (8000260 <main+0x48>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a05      	ldr	r2, [pc, #20]	; (8000260 <main+0x48>)
 800024a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800024e:	6153      	str	r3, [r2, #20]
		systickDelayMs(1000);
 8000250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000254:	f000 f806 	bl	8000264 <systickDelayMs>
		GPIOG->ODR ^= LED_PIN;
 8000258:	e7f4      	b.n	8000244 <main+0x2c>
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40021800 	.word	0x40021800

08000264 <systickDelayMs>:
#define CTRL_COUNTFLAG		(1U<<16)



void systickDelayMs(int delay)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	/************* Configure systick *****************/
	/* Reload with number of clocks per milisecond */
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <systickDelayMs+0x50>)
 800026e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000272:	605a      	str	r2, [r3, #4]

	/* Clear systick current value*/

	SysTick ->VAL = 0;
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <systickDelayMs+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]

	/* Enable systick and select internal clk src*/

	SysTick->CTRL = CTRL_ENABLE | CRTL_CLKSRC;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <systickDelayMs+0x50>)
 800027c:	2205      	movs	r2, #5
 800027e:	601a      	str	r2, [r3, #0]

	for (int i=0; i < delay; i++)
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	e009      	b.n	800029a <systickDelayMs+0x36>
	{
		/* wait until the count flag is set */

		while ((SysTick->CTRL & CTRL_COUNTFLAG) == 0) {}
 8000286:	bf00      	nop
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <systickDelayMs+0x50>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000290:	2b00      	cmp	r3, #0
 8000292:	d0f9      	beq.n	8000288 <systickDelayMs+0x24>
	for (int i=0; i < delay; i++)
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	3301      	adds	r3, #1
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	68fa      	ldr	r2, [r7, #12]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	429a      	cmp	r2, r3
 80002a0:	dbf1      	blt.n	8000286 <systickDelayMs+0x22>

	}

	SysTick->CTRL = 0;
 80002a2:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <systickDelayMs+0x50>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e000e010 	.word	0xe000e010

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 f811 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff95 	bl	8000218 <main>

080002ee <LoopForever>:

LoopForever:
    b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	4d0d      	ldr	r5, [pc, #52]	; (8000344 <__libc_init_array+0x38>)
 8000310:	4c0d      	ldr	r4, [pc, #52]	; (8000348 <__libc_init_array+0x3c>)
 8000312:	1b64      	subs	r4, r4, r5
 8000314:	10a4      	asrs	r4, r4, #2
 8000316:	2600      	movs	r6, #0
 8000318:	42a6      	cmp	r6, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	4d0b      	ldr	r5, [pc, #44]	; (800034c <__libc_init_array+0x40>)
 800031e:	4c0c      	ldr	r4, [pc, #48]	; (8000350 <__libc_init_array+0x44>)
 8000320:	f000 f818 	bl	8000354 <_init>
 8000324:	1b64      	subs	r4, r4, r5
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	2600      	movs	r6, #0
 800032a:	42a6      	cmp	r6, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f855 3b04 	ldr.w	r3, [r5], #4
 8000334:	4798      	blx	r3
 8000336:	3601      	adds	r6, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f855 3b04 	ldr.w	r3, [r5], #4
 800033e:	4798      	blx	r3
 8000340:	3601      	adds	r6, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr
