/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Abdi Tujuba
 * @brief          : GPIO - Driver
 ******************************************************************************
 */

#include "stm32f4xx.h"
#include <stdint.h>

#define UART2EN 			(1U<<17)
#define GPIOAEN  			(1U<<0)

#define SYS_FREQ    		16000000
#define APB1_CLK			SYS_FREQ
#define UART_BAUD_RATE		115200

#define CR1_TE   			(1U<<3)

static void uart_set_baudrate(USART_TypeDef *USARTTx, uint32_t  periphClk, uint32_t BaudRate );
static uint16_t compute_uart_bd(uint32_t  periphClk, uint32_t BaudRate);


int main (void)
{


	while(1)
	{

	}
}

void uart_tx_init()
{
	/********************* Configure UART GPIO PINs ****************/

	/* Enable clock Access to GPIOG*/

	RCC->AHB1ENR |= GPIOAEN ;


	/* Set PA2 mode to Alternate Function Mode*/

	GPIOA->MODER |=(1U<<5);
	GPIOA->MODER &= ~(1U<<4);


	/*Set PA2 Alternate function type to UART_TX (AF07) */
	// AFRL - index 0 , AFRH - index 1, USART2_TX function is AF07

	GPIOA->AFR[0] |= (1U<<8);
	GPIOA->AFR[0] |= (1U<<9);
	GPIOA->AFR[0] |= (1U<<10);
	GPIOA->AFR[0] &= ~(1U<<11);

	/************ Configure UART  module *********************/

	/* Enable clock access to UART2*/

	RCC->APB1ENR |= UART2EN;

	/* Configure baudrate */

	uart_set_baudrate(USART2,APB1_CLK,UART_BAUD_RATE);

	/* Configure the transfer direction */

	//USART2 ->

	/*Enable uart module */
}

static void uart_set_baudrate(USART_TypeDef *USARTTx, uint32_t  periphClk, uint32_t BaudRate )
{
	USARTTx->BRR = compute_uart_bd(periphClk,BaudRate);
}

static uint16_t compute_uart_bd(uint32_t  periphClk, uint32_t BaudRate)
{

	return ((periphClk + (BaudRate/2U))/BaudRate);
}
