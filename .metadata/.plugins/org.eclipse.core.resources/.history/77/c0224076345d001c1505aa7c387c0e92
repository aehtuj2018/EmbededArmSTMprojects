    #define  GPIOAEN			  (1U<<0)
    #define  UART2EN			  (1U<<17)

    #define  SYS_FREQ			  4000000
    #define	 APB1_CLK			  SYS_FREQ

    #define CR1_TE				  (1U<<3)
    #define CR1_RE				  (1U<<2)


    #define CR1_UE				  (1U<<0)

    #define ISR_TXE				  (1U<<7)
    #define ISR_RNXE			  (1U<<5)


    static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t Baudrate);
    static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t Baudrate);
    static void uart2_write(USART_TypeDef *USARTx ,uint8_t ch);



    int __io_putchar(int ch)
    {
    	uart2_write(USART2,ch);

    	return ch;
    }

    void uart2_rxtx_init(void)
    {
    	/************Configure the uart pin********************/
    	/*Enable clock access to GPIOA for PA2 and PA3 as TX line*/
    	 RCC->AHB2ENR  |= GPIOAEN;

    	/*Set PA2 mode as alternate function mode*/
    	 GPIOA->MODER &=~(1U<<4);
    	 GPIOA->MODER |=(1U<<5);

    	/*Set the alternate function typed to UART*/
    	 GPIOA->AFR[0] |=(1U<<8);
    	 GPIOA->AFR[0] |=(1U<<9);
    	 GPIOA->AFR[0] |=(1U<<10);
    	 GPIOA->AFR[0] &=~(1U<<11);


    	/*Set PA3 mode as alternate function mode*/
    	 GPIOA->MODER &=~(1U<<6);
    	 GPIOA->MODER |=(1U<<7);

    	/*Set the alternate function typed to UART*/
    	 GPIOA->AFR[0] |=(1U<<12);
    	 GPIOA->AFR[0] |=(1U<<13);
    	 GPIOA->AFR[0] |=(1U<<14);
    	 GPIOA->AFR[0] &=~(1U<<15);


    	/************Configure the uart module********************/
    	/*Enable clock access to UART2*/
    	 RCC->APB1ENR1 |= UART2EN;

    	/*Configure baudrate*/
    	 uart_set_baudrate(USART2, APB1_CLK, 115200);

    	/*Configure transfer direction*/
    	 USART2->CR1 = (CR1_TE |CR1_RE);

    	/*Enable UART module*/
    	 USART2->CR1 |= CR1_UE;


    }

    void uart2_tx_init(void)
    {
    	/************Configure the uart pin********************/
    	/*Enable clock access to GPIOA for PA2 as TX line*/
    	 RCC->AHB2ENR  |= GPIOAEN;

    	/*Set PA2 mode as alternate function mode*/
    	 GPIOA->MODER &=~(1U<<4);
    	 GPIOA->MODER |=(1U<<5);

    	/*Set the alternate function typed to UART*/
    	 GPIOA->AFR[0] |=(1U<<8);
    	 GPIOA->AFR[0] |=(1U<<9);
    	 GPIOA->AFR[0] |=(1U<<10);
    	 GPIOA->AFR[0] &=~(1U<<11);


    	/************Configure the uart module********************/
    	/*Enable clock access to UART2*/
    	 RCC->APB1ENR1 |= UART2EN;

    	/*Configure baudrate*/
    	 uart_set_baudrate(USART2, APB1_CLK, 115200);

    	/*Configure transfer direction*/
    	 USART2->CR1 = CR1_TE ;

    	/*Enable UART module*/
    	 USART2->CR1 |= CR1_UE;


    }

    char uart2_read(USART_TypeDef *USARTx)
    {
    	//wait for receive data register not empty flag (RXNE)
    	 while(!(USARTx->ISR  & ISR_RNXE)){}

    	//Read content of receive data register
    	return USARTx->RDR;
    }

    static void uart2_write(USART_TypeDef *USARTx ,uint8_t ch)
    {

    	/*Wait for transmit data register to be empty*/
    	 while(!(USARTx->ISR  & ISR_TXE)){}

    	/*Transmit value*/
    	 USARTx->TDR  =  (ch & 0xFF);
    }

    static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t Baudrate)
    {
    	USARTx->BRR = compute_uart_div( PeriphClk,  Baudrate);
    }



    static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t Baudrate)
    {
    	return ((PeriphClk  +  (Baudrate/2))/Baudrate);
    }
