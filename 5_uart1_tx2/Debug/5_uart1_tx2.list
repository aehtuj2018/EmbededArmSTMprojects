
5_uart1_tx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000238  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e4  080003ec  000103ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  000103ec  2**0
                  CONTENTS
  4 .ARM          00000000  080003e4  080003e4  000103ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e4  080003ec  000103ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000103e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003e8  080003e8  000103e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103ec  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000548  00000000  00000000  0001041c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000198  00000000  00000000  00010964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a265  00000000  00000000  00010bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005fa  00000000  00000000  0002ae1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092fc1  00000000  00000000  0002b417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000be3d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e8  00000000  00000000  000be42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003cc 	.word	0x080003cc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003cc 	.word	0x080003cc

080001ec <main>:
static uint16_t compute_uart_bd(uint32_t  periphClk, uint32_t BaudRate);
void uart1_write(int ch);
int uart_char;

int main (void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	uart1_tx_init();
 80001f0:	f000 f804 	bl	80001fc <uart1_tx_init>

	while(1)
	{
		uart1_write('A');
 80001f4:	2041      	movs	r0, #65	; 0x41
 80001f6:	f000 f859 	bl	80002ac <uart1_write>
 80001fa:	e7fb      	b.n	80001f4 <main+0x8>

080001fc <uart1_tx_init>:
	}
}


void uart1_tx_init()
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	/********************* Configure UART GPIO PINs ****************/

	/* Enable clock Access to GPIOA*/

	RCC->AHB1ENR |= GPIOBEN ; /* USART1 is on PB6, so enable clock to port B*/
 8000200:	4b26      	ldr	r3, [pc, #152]	; (800029c <uart1_tx_init+0xa0>)
 8000202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000204:	4a25      	ldr	r2, [pc, #148]	; (800029c <uart1_tx_init+0xa0>)
 8000206:	f043 0302 	orr.w	r3, r3, #2
 800020a:	6313      	str	r3, [r2, #48]	; 0x30


	/* Set PA9 mode to Alternate Function Mode*/

	GPIOB->MODER |=(1U<<13); /* USART1 on PA6*/
 800020c:	4b24      	ldr	r3, [pc, #144]	; (80002a0 <uart1_tx_init+0xa4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a23      	ldr	r2, [pc, #140]	; (80002a0 <uart1_tx_init+0xa4>)
 8000212:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000216:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<12);
 8000218:	4b21      	ldr	r3, [pc, #132]	; (80002a0 <uart1_tx_init+0xa4>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a20      	ldr	r2, [pc, #128]	; (80002a0 <uart1_tx_init+0xa4>)
 800021e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000222:	6013      	str	r3, [r2, #0]
	//GPIOB->MODER |= (2U<<GPIO_MODER_MODER6_Pos);

	/*Set PA9 Alternate function type to UART_TX (AF07) */
	// AFRL - index 0 , AFRH - index 1, USART1_TX function is AF07

	GPIOB->AFR[0] |= (1U<<24);
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <uart1_tx_init+0xa4>)
 8000226:	6a1b      	ldr	r3, [r3, #32]
 8000228:	4a1d      	ldr	r2, [pc, #116]	; (80002a0 <uart1_tx_init+0xa4>)
 800022a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800022e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<25);
 8000230:	4b1b      	ldr	r3, [pc, #108]	; (80002a0 <uart1_tx_init+0xa4>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a1a      	ldr	r2, [pc, #104]	; (80002a0 <uart1_tx_init+0xa4>)
 8000236:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800023a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<26);
 800023c:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <uart1_tx_init+0xa4>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <uart1_tx_init+0xa4>)
 8000242:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000246:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<27);
 8000248:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <uart1_tx_init+0xa4>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <uart1_tx_init+0xa4>)
 800024e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000252:	6213      	str	r3, [r2, #32]

	/************ Configure UART  module *********************/

	/* Enable clock access to UART2*/

	RCC->APB2ENR |= UART1EN;
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <uart1_tx_init+0xa0>)
 8000256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000258:	4a10      	ldr	r2, [pc, #64]	; (800029c <uart1_tx_init+0xa0>)
 800025a:	f043 0310 	orr.w	r3, r3, #16
 800025e:	6453      	str	r3, [r2, #68]	; 0x44

	/* Configure baudrate */

	uart_set_baudrate(USART1,APB2_CLK,UART_BAUD_RATE);
 8000260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000264:	490f      	ldr	r1, [pc, #60]	; (80002a4 <uart1_tx_init+0xa8>)
 8000266:	4810      	ldr	r0, [pc, #64]	; (80002a8 <uart1_tx_init+0xac>)
 8000268:	f000 f83c 	bl	80002e4 <uart_set_baudrate>

	/* Configure the transfer direction */

	USART1 ->CR1 = CR1_TE;
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <uart1_tx_init+0xac>)
 800026e:	2208      	movs	r2, #8
 8000270:	60da      	str	r2, [r3, #12]

	/*Stop bit */

	USART1->CR2 &= ~ (1U<<12);
 8000272:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <uart1_tx_init+0xac>)
 8000274:	691b      	ldr	r3, [r3, #16]
 8000276:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <uart1_tx_init+0xac>)
 8000278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800027c:	6113      	str	r3, [r2, #16]
	USART1->CR2 &= ~ (1U<<13);
 800027e:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <uart1_tx_init+0xac>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	4a09      	ldr	r2, [pc, #36]	; (80002a8 <uart1_tx_init+0xac>)
 8000284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000288:	6113      	str	r3, [r2, #16]

	/*Enable uart module */

	USART1->CR1 |= CR1_UE;
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <uart1_tx_init+0xac>)
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <uart1_tx_init+0xac>)
 8000290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000294:	60d3      	str	r3, [r2, #12]
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020400 	.word	0x40020400
 80002a4:	00f42400 	.word	0x00f42400
 80002a8:	40011000 	.word	0x40011000

080002ac <uart1_write>:


void uart1_write(int ch)

{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	/* Make sure the transmit data is empty */

	while (!(USART1->SR & SR_TXE))
 80002b4:	bf00      	nop
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <uart1_write+0x30>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f9      	beq.n	80002b6 <uart1_write+0xa>
	{};

	/* Write to transmit data register */

	uart_char = ( USART1->DR = (ch & 0xFF));
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a05      	ldr	r2, [pc, #20]	; (80002dc <uart1_write+0x30>)
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	6053      	str	r3, [r2, #4]
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <uart1_write+0x34>)
 80002ce:	601a      	str	r2, [r3, #0]

//	USART1->DR = 120;

}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40011000 	.word	0x40011000
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <uart_set_baudrate>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t  periphClk, uint32_t BaudRate )
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(periphClk,BaudRate);
 80002f0:	6879      	ldr	r1, [r7, #4]
 80002f2:	68b8      	ldr	r0, [r7, #8]
 80002f4:	f000 f808 	bl	8000308 <compute_uart_bd>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	609a      	str	r2, [r3, #8]


}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t  periphClk, uint32_t BaudRate)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]

	return ((periphClk + (BaudRate/2U))/BaudRate);
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	085a      	lsrs	r2, r3, #1
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	441a      	add	r2, r3
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000320:	b29b      	uxth	r3, r3
}
 8000322:	4618      	mov	r0, r3
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
	...

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	; (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	; (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	; (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ff43 	bl	80001ec <main>

08000366 <LoopForever>:

LoopForever:
    b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	080003ec 	.word	0x080003ec
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	20000020 	.word	0x20000020

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4d0d      	ldr	r5, [pc, #52]	; (80003bc <__libc_init_array+0x38>)
 8000388:	4c0d      	ldr	r4, [pc, #52]	; (80003c0 <__libc_init_array+0x3c>)
 800038a:	1b64      	subs	r4, r4, r5
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	2600      	movs	r6, #0
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4d0b      	ldr	r5, [pc, #44]	; (80003c4 <__libc_init_array+0x40>)
 8000396:	4c0c      	ldr	r4, [pc, #48]	; (80003c8 <__libc_init_array+0x44>)
 8000398:	f000 f818 	bl	80003cc <_init>
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	2600      	movs	r6, #0
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ac:	4798      	blx	r3
 80003ae:	3601      	adds	r6, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b6:	4798      	blx	r3
 80003b8:	3601      	adds	r6, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e4 	.word	0x080003e4
 80003c8:	080003e8 	.word	0x080003e8

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
