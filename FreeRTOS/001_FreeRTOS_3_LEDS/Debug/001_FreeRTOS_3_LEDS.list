
001_FreeRTOS_3_LEDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800568c  0800568c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005694  08005694  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800569c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014414  2000001c  080056b8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014430  080056b8  00024430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137c5  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd7  00000000  00000000  00033811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  000365e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  000377e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002468e  00000000  00000000  00038850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015413  00000000  00000000  0005cede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc4cd  00000000  00000000  000722f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e7be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  0014e810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005564 	.word	0x08005564

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08005564 	.word	0x08005564

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012e5c 	.word	0x20012e5c

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b974 	b.w	80005a4 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468e      	mov	lr, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d14d      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e2:	428a      	cmp	r2, r1
 80002e4:	4694      	mov	ip, r2
 80002e6:	d969      	bls.n	80003bc <__udivmoddi4+0xe8>
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	b152      	cbz	r2, 8000304 <__udivmoddi4+0x30>
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	f1c2 0120 	rsb	r1, r2, #32
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000302:	4094      	lsls	r4, r2
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	0c21      	lsrs	r1, r4, #16
 800030a:	fbbe f6f8 	udiv	r6, lr, r8
 800030e:	fa1f f78c 	uxth.w	r7, ip
 8000312:	fb08 e316 	mls	r3, r8, r6, lr
 8000316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800031a:	fb06 f107 	mul.w	r1, r6, r7
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 30ff 	add.w	r0, r6, #4294967295
 800032a:	f080 811f 	bcs.w	800056c <__udivmoddi4+0x298>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 811c 	bls.w	800056c <__udivmoddi4+0x298>
 8000334:	3e02      	subs	r6, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a5b      	subs	r3, r3, r1
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000340:	fb08 3310 	mls	r3, r8, r0, r3
 8000344:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000348:	fb00 f707 	mul.w	r7, r0, r7
 800034c:	42a7      	cmp	r7, r4
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x92>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 33ff 	add.w	r3, r0, #4294967295
 8000358:	f080 810a 	bcs.w	8000570 <__udivmoddi4+0x29c>
 800035c:	42a7      	cmp	r7, r4
 800035e:	f240 8107 	bls.w	8000570 <__udivmoddi4+0x29c>
 8000362:	4464      	add	r4, ip
 8000364:	3802      	subs	r0, #2
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	1be4      	subs	r4, r4, r7
 800036c:	2600      	movs	r6, #0
 800036e:	b11d      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 8000370:	40d4      	lsrs	r4, r2
 8000372:	2300      	movs	r3, #0
 8000374:	e9c5 4300 	strd	r4, r3, [r5]
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0xc2>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80ef 	beq.w	8000566 <__udivmoddi4+0x292>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x160>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xd4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80f9 	bhi.w	800059a <__udivmoddi4+0x2c6>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0303 	sbc.w	r3, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	469e      	mov	lr, r3
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e0      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ba:	e7dd      	b.n	8000378 <__udivmoddi4+0xa4>
 80003bc:	b902      	cbnz	r2, 80003c0 <__udivmoddi4+0xec>
 80003be:	deff      	udf	#255	; 0xff
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	f040 8092 	bne.w	80004ee <__udivmoddi4+0x21a>
 80003ca:	eba1 010c 	sub.w	r1, r1, ip
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	2601      	movs	r6, #1
 80003d8:	0c20      	lsrs	r0, r4, #16
 80003da:	fbb1 f3f7 	udiv	r3, r1, r7
 80003de:	fb07 1113 	mls	r1, r7, r3, r1
 80003e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e6:	fb0e f003 	mul.w	r0, lr, r3
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x12c>
 80003ee:	eb1c 0101 	adds.w	r1, ip, r1
 80003f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x12a>
 80003f8:	4288      	cmp	r0, r1
 80003fa:	f200 80cb 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 80003fe:	4643      	mov	r3, r8
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f7 	udiv	r0, r1, r7
 8000408:	fb07 1110 	mls	r1, r7, r0, r1
 800040c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000410:	fb0e fe00 	mul.w	lr, lr, r0
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x156>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x154>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2ca>
 8000428:	4608      	mov	r0, r1
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000432:	e79c      	b.n	800036e <__udivmoddi4+0x9a>
 8000434:	f1c6 0720 	rsb	r7, r6, #32
 8000438:	40b3      	lsls	r3, r6
 800043a:	fa22 fc07 	lsr.w	ip, r2, r7
 800043e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000442:	fa20 f407 	lsr.w	r4, r0, r7
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	431c      	orrs	r4, r3
 800044c:	40f9      	lsrs	r1, r7
 800044e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000452:	fa00 f306 	lsl.w	r3, r0, r6
 8000456:	fbb1 f8f9 	udiv	r8, r1, r9
 800045a:	0c20      	lsrs	r0, r4, #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fb09 1118 	mls	r1, r9, r8, r1
 8000464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000468:	fb08 f00e 	mul.w	r0, r8, lr
 800046c:	4288      	cmp	r0, r1
 800046e:	fa02 f206 	lsl.w	r2, r2, r6
 8000472:	d90b      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f108 3aff 	add.w	sl, r8, #4294967295
 800047c:	f080 8088 	bcs.w	8000590 <__udivmoddi4+0x2bc>
 8000480:	4288      	cmp	r0, r1
 8000482:	f240 8085 	bls.w	8000590 <__udivmoddi4+0x2bc>
 8000486:	f1a8 0802 	sub.w	r8, r8, #2
 800048a:	4461      	add	r1, ip
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f9 	udiv	r0, r1, r9
 8000494:	fb09 1110 	mls	r1, r9, r0, r1
 8000498:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049c:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a0:	458e      	cmp	lr, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x1e2>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ac:	d26c      	bcs.n	8000588 <__udivmoddi4+0x2b4>
 80004ae:	458e      	cmp	lr, r1
 80004b0:	d96a      	bls.n	8000588 <__udivmoddi4+0x2b4>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ba:	fba0 9402 	umull	r9, r4, r0, r2
 80004be:	eba1 010e 	sub.w	r1, r1, lr
 80004c2:	42a1      	cmp	r1, r4
 80004c4:	46c8      	mov	r8, r9
 80004c6:	46a6      	mov	lr, r4
 80004c8:	d356      	bcc.n	8000578 <__udivmoddi4+0x2a4>
 80004ca:	d053      	beq.n	8000574 <__udivmoddi4+0x2a0>
 80004cc:	b15d      	cbz	r5, 80004e6 <__udivmoddi4+0x212>
 80004ce:	ebb3 0208 	subs.w	r2, r3, r8
 80004d2:	eb61 010e 	sbc.w	r1, r1, lr
 80004d6:	fa01 f707 	lsl.w	r7, r1, r7
 80004da:	fa22 f306 	lsr.w	r3, r2, r6
 80004de:	40f1      	lsrs	r1, r6
 80004e0:	431f      	orrs	r7, r3
 80004e2:	e9c5 7100 	strd	r7, r1, [r5]
 80004e6:	2600      	movs	r6, #0
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	40d8      	lsrs	r0, r3
 80004f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f8:	fa21 f303 	lsr.w	r3, r1, r3
 80004fc:	4091      	lsls	r1, r2
 80004fe:	4301      	orrs	r1, r0
 8000500:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000504:	fa1f fe8c 	uxth.w	lr, ip
 8000508:	fbb3 f0f7 	udiv	r0, r3, r7
 800050c:	fb07 3610 	mls	r6, r7, r0, r3
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000516:	fb00 f60e 	mul.w	r6, r0, lr
 800051a:	429e      	cmp	r6, r3
 800051c:	fa04 f402 	lsl.w	r4, r4, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x260>
 8000522:	eb1c 0303 	adds.w	r3, ip, r3
 8000526:	f100 38ff 	add.w	r8, r0, #4294967295
 800052a:	d22f      	bcs.n	800058c <__udivmoddi4+0x2b8>
 800052c:	429e      	cmp	r6, r3
 800052e:	d92d      	bls.n	800058c <__udivmoddi4+0x2b8>
 8000530:	3802      	subs	r0, #2
 8000532:	4463      	add	r3, ip
 8000534:	1b9b      	subs	r3, r3, r6
 8000536:	b289      	uxth	r1, r1
 8000538:	fbb3 f6f7 	udiv	r6, r3, r7
 800053c:	fb07 3316 	mls	r3, r7, r6, r3
 8000540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000544:	fb06 f30e 	mul.w	r3, r6, lr
 8000548:	428b      	cmp	r3, r1
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x28a>
 800054c:	eb1c 0101 	adds.w	r1, ip, r1
 8000550:	f106 38ff 	add.w	r8, r6, #4294967295
 8000554:	d216      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000556:	428b      	cmp	r3, r1
 8000558:	d914      	bls.n	8000584 <__udivmoddi4+0x2b0>
 800055a:	3e02      	subs	r6, #2
 800055c:	4461      	add	r1, ip
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000564:	e738      	b.n	80003d8 <__udivmoddi4+0x104>
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e705      	b.n	8000378 <__udivmoddi4+0xa4>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x64>
 8000570:	4618      	mov	r0, r3
 8000572:	e6f8      	b.n	8000366 <__udivmoddi4+0x92>
 8000574:	454b      	cmp	r3, r9
 8000576:	d2a9      	bcs.n	80004cc <__udivmoddi4+0x1f8>
 8000578:	ebb9 0802 	subs.w	r8, r9, r2
 800057c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000580:	3801      	subs	r0, #1
 8000582:	e7a3      	b.n	80004cc <__udivmoddi4+0x1f8>
 8000584:	4646      	mov	r6, r8
 8000586:	e7ea      	b.n	800055e <__udivmoddi4+0x28a>
 8000588:	4620      	mov	r0, r4
 800058a:	e794      	b.n	80004b6 <__udivmoddi4+0x1e2>
 800058c:	4640      	mov	r0, r8
 800058e:	e7d1      	b.n	8000534 <__udivmoddi4+0x260>
 8000590:	46d0      	mov	r8, sl
 8000592:	e77b      	b.n	800048c <__udivmoddi4+0x1b8>
 8000594:	3b02      	subs	r3, #2
 8000596:	4461      	add	r1, ip
 8000598:	e732      	b.n	8000400 <__udivmoddi4+0x12c>
 800059a:	4630      	mov	r0, r6
 800059c:	e709      	b.n	80003b2 <__udivmoddi4+0xde>
 800059e:	4464      	add	r4, ip
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x156>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fa29 	bl	8000a04 <HAL_Init>
  //uart2_rxtx_init();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f831 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8a1 	bl	80006fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL|=(1U<<0);
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <main+0x60>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <main+0x60>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 80005c6:	4811      	ldr	r0, [pc, #68]	; (800060c <main+0x64>)
 80005c8:	f003 fa4a 	bl	8003a60 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 80005cc:	f003 f872 	bl	80036b4 <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start();

  status =  xTaskCreate(led_green_handler,"LED_Green_Task",200,NULL,2,&task1_Handle); // create a task , task 1
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2302      	movs	r3, #2
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	22c8      	movs	r2, #200	; 0xc8
 80005dc:	490c      	ldr	r1, [pc, #48]	; (8000610 <main+0x68>)
 80005de:	480d      	ldr	r0, [pc, #52]	; (8000614 <main+0x6c>)
 80005e0:	f001 fe7b 	bl	80022da <xTaskCreate>
 80005e4:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00a      	beq.n	8000602 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005fe:	bf00      	nop
 8000600:	e7fe      	b.n	8000600 <main+0x58>

    configASSERT(status == pdPASS);*/

  //start freeRTOS scheduler

  vTaskStartScheduler();
 8000602:	f001 fff5 	bl	80025f0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000606:	e7fe      	b.n	8000606 <main+0x5e>
 8000608:	e0001000 	.word	0xe0001000
 800060c:	0007a120 	.word	0x0007a120
 8000610:	0800557c 	.word	0x0800557c
 8000614:	080007f9 	.word	0x080007f9

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	; 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 ff94 	bl	8005554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <SystemClock_Config+0xdc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a2b      	ldr	r2, [pc, #172]	; (80006f4 <SystemClock_Config+0xdc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <SystemClock_Config+0xdc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <SystemClock_Config+0xe0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a25      	ldr	r2, [pc, #148]	; (80006f8 <SystemClock_Config+0xe0>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <SystemClock_Config+0xe0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800068c:	23b4      	movs	r3, #180	; 0xb4
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000698:	2302      	movs	r3, #2
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 f877 	bl	8001794 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ac:	f000 f8c6 	bl	800083c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b0:	f000 fcb8 	bl	8001024 <HAL_PWREx_EnableOverDrive>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ba:	f000 f8bf 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	2105      	movs	r1, #5
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fcf1 	bl	80010c4 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006e8:	f000 f8a8 	bl	800083c <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	; 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b35      	ldr	r3, [pc, #212]	; (80007ec <MX_GPIO_Init+0xf0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a34      	ldr	r2, [pc, #208]	; (80007ec <MX_GPIO_Init+0xf0>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b32      	ldr	r3, [pc, #200]	; (80007ec <MX_GPIO_Init+0xf0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <MX_GPIO_Init+0xf0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a2d      	ldr	r2, [pc, #180]	; (80007ec <MX_GPIO_Init+0xf0>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_GPIO_Init+0xf0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_GPIO_Init+0xf0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a26      	ldr	r2, [pc, #152]	; (80007ec <MX_GPIO_Init+0xf0>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <MX_GPIO_Init+0xf0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_GPIO_Init+0xf0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <MX_GPIO_Init+0xf0>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_GPIO_Init+0xf0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2120      	movs	r1, #32
 8000786:	481a      	ldr	r0, [pc, #104]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000788:	f000 fc18 	bl	8000fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000792:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4814      	ldr	r0, [pc, #80]	; (80007f4 <MX_GPIO_Init+0xf8>)
 80007a4:	f000 fa76 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007a8:	230c      	movs	r3, #12
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b8:	2307      	movs	r3, #7
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <MX_GPIO_Init+0xf4>)
 80007c4:	f000 fa66 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c8:	2320      	movs	r3, #32
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0xf4>)
 80007e0:	f000 fa58 	bl	8000c94 <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40020800 	.word	0x40020800

080007f8 <led_green_handler>:
}*/

// Task 1 handler

static void led_green_handler(void *parameters)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]


	while(1){

		HAL_GPIO_TogglePin(GPIOC,LED_ON_BOARD_GREEN);
 8000800:	2120      	movs	r1, #32
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <led_green_handler+0x1c>)
 8000804:	f000 fbf3 	bl	8000fee <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080c:	f000 f93c 	bl	8000a88 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC,LED_ON_BOARD_GREEN);
 8000810:	e7f6      	b.n	8000800 <led_green_handler+0x8>
 8000812:	bf00      	nop
 8000814:	40020800 	.word	0x40020800

08000818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082a:	f000 f90d 	bl	8000a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40001000 	.word	0x40001000

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000886:	f002 fb5f 	bl	8002f48 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	2036      	movs	r0, #54	; 0x36
 80008ae:	f000 f9c7 	bl	8000c40 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008b2:	2036      	movs	r0, #54	; 0x36
 80008b4:	f000 f9e0 	bl	8000c78 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <HAL_InitTick+0xa4>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a1e      	ldr	r2, [pc, #120]	; (800093c <HAL_InitTick+0xa4>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <HAL_InitTick+0xa4>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 0310 	and.w	r3, r3, #16
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d4:	f107 0210 	add.w	r2, r7, #16
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fcf6 	bl	80012d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008e4:	f000 fce0 	bl	80012a8 <HAL_RCC_GetPCLK1Freq>
 80008e8:	4603      	mov	r3, r0
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <HAL_InitTick+0xa8>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	0c9b      	lsrs	r3, r3, #18
 80008f8:	3b01      	subs	r3, #1
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_InitTick+0xac>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <HAL_InitTick+0xb0>)
 8000900:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_InitTick+0xac>)
 8000904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000908:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_InitTick+0xac>)
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_InitTick+0xac>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_InitTick+0xac>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <HAL_InitTick+0xac>)
 800091e:	f001 f9d7 	bl	8001cd0 <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d104      	bne.n	8000932 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <HAL_InitTick+0xac>)
 800092a:	f001 fa2b 	bl	8001d84 <HAL_TIM_Base_Start_IT>
 800092e:	4603      	mov	r3, r0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3730      	adds	r7, #48	; 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	431bde83 	.word	0x431bde83
 8000944:	20000038 	.word	0x20000038
 8000948:	40001000 	.word	0x40001000

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <TIM6_DAC_IRQHandler+0x10>)
 800097e:	f001 fa71 	bl	8001e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000038 	.word	0x20000038

0800098c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <SystemInit+0x20>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000996:	4a05      	ldr	r2, [pc, #20]	; (80009ac <SystemInit+0x20>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009b6:	490e      	ldr	r1, [pc, #56]	; (80009f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009cc:	4c0b      	ldr	r4, [pc, #44]	; (80009fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009da:	f7ff ffd7 	bl	800098c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009de:	f004 fd77 	bl	80054d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e2:	f7ff fde1 	bl	80005a8 <main>
  bx  lr    
 80009e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80009f4:	0800569c 	.word	0x0800569c
  ldr r2, =_sbss
 80009f8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80009fc:	20014430 	.word	0x20014430

08000a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC_IRQHandler>
	...

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <HAL_Init+0x40>)
 8000a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_Init+0x40>)
 8000a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_Init+0x40>)
 8000a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f8fc 	bl	8000c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff ff30 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a38:	f7ff ff06 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023c00 	.word	0x40023c00

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000080 	.word	0x20000080

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000080 	.word	0x20000080

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff ffee 	bl	8000a70 <HAL_GetTick>
 8000a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_Delay+0x44>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aae:	bf00      	nop
 8000ab0:	f7ff ffde 	bl	8000a70 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <__NVIC_EnableIRQ+0x38>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff4c 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c52:	f7ff ff61 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	68b9      	ldr	r1, [r7, #8]
 8000c5c:	6978      	ldr	r0, [r7, #20]
 8000c5e:	f7ff ffb1 	bl	8000bc4 <NVIC_EncodePriority>
 8000c62:	4602      	mov	r2, r0
 8000c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff80 	bl	8000b70 <__NVIC_SetPriority>
}
 8000c70:	bf00      	nop
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff54 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
 8000cae:	e165      	b.n	8000f7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	f040 8154 	bne.w	8000f76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d005      	beq.n	8000ce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d130      	bne.n	8000d48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	091b      	lsrs	r3, r3, #4
 8000d32:	f003 0201 	and.w	r2, r3, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d017      	beq.n	8000d84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	69b9      	ldr	r1, [r7, #24]
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80ae 	beq.w	8000f76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b5d      	ldr	r3, [pc, #372]	; (8000f94 <HAL_GPIO_Init+0x300>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a5c      	ldr	r2, [pc, #368]	; (8000f94 <HAL_GPIO_Init+0x300>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b5a      	ldr	r3, [pc, #360]	; (8000f94 <HAL_GPIO_Init+0x300>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e36:	4a58      	ldr	r2, [pc, #352]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4f      	ldr	r2, [pc, #316]	; (8000f9c <HAL_GPIO_Init+0x308>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d025      	beq.n	8000eae <HAL_GPIO_Init+0x21a>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4e      	ldr	r2, [pc, #312]	; (8000fa0 <HAL_GPIO_Init+0x30c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d01f      	beq.n	8000eaa <HAL_GPIO_Init+0x216>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4d      	ldr	r2, [pc, #308]	; (8000fa4 <HAL_GPIO_Init+0x310>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d019      	beq.n	8000ea6 <HAL_GPIO_Init+0x212>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4c      	ldr	r2, [pc, #304]	; (8000fa8 <HAL_GPIO_Init+0x314>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x20e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <HAL_GPIO_Init+0x318>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x20a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4a      	ldr	r2, [pc, #296]	; (8000fb0 <HAL_GPIO_Init+0x31c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x206>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a49      	ldr	r2, [pc, #292]	; (8000fb4 <HAL_GPIO_Init+0x320>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x202>
 8000e92:	2306      	movs	r3, #6
 8000e94:	e00c      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000e96:	2307      	movs	r3, #7
 8000e98:	e00a      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	e008      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	f002 0203 	and.w	r2, r2, #3
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec0:	4935      	ldr	r1, [pc, #212]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ef2:	4a31      	ldr	r2, [pc, #196]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f1c:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f70:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	f67f ae96 	bls.w	8000cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020c00 	.word	0x40020c00
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40021400 	.word	0x40021400
 8000fb4:	40021800 	.word	0x40021800
 8000fb8:	40013c00 	.word	0x40013c00

08000fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fcc:	787b      	ldrb	r3, [r7, #1]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd2:	887a      	ldrh	r2, [r7, #2]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fd8:	e003      	b.n	8000fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	041a      	lsls	r2, r3, #16
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	619a      	str	r2, [r3, #24]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001000:	887a      	ldrh	r2, [r7, #2]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4013      	ands	r3, r2
 8001006:	041a      	lsls	r2, r3, #16
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43d9      	mvns	r1, r3
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	400b      	ands	r3, r1
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	619a      	str	r2, [r3, #24]
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001050:	f7ff fd0e 	bl	8000a70 <HAL_GetTick>
 8001054:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001056:	e009      	b.n	800106c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001058:	f7ff fd0a 	bl	8000a70 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001066:	d901      	bls.n	800106c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e01f      	b.n	80010ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <HAL_PWREx_EnableOverDrive+0x98>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001078:	d1ee      	bne.n	8001058 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001080:	f7ff fcf6 	bl	8000a70 <HAL_GetTick>
 8001084:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001086:	e009      	b.n	800109c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001088:	f7ff fcf2 	bl	8000a70 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001096:	d901      	bls.n	800109c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e007      	b.n	80010ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_PWREx_EnableOverDrive+0x98>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010a8:	d1ee      	bne.n	8001088 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	420e0040 	.word	0x420e0040
 80010bc:	40007000 	.word	0x40007000
 80010c0:	420e0044 	.word	0x420e0044

080010c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0cc      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010d8:	4b68      	ldr	r3, [pc, #416]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 030f 	and.w	r3, r3, #15
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d90c      	bls.n	8001100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e6:	4b65      	ldr	r3, [pc, #404]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	4b63      	ldr	r3, [pc, #396]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0b8      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001118:	4b59      	ldr	r3, [pc, #356]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800113a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113c:	4b50      	ldr	r3, [pc, #320]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	494d      	ldr	r1, [pc, #308]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	4313      	orrs	r3, r2
 800114c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d044      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d107      	bne.n	8001172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d119      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e07f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d003      	beq.n	8001182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800117e:	2b03      	cmp	r3, #3
 8001180:	d107      	bne.n	8001192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001182:	4b3f      	ldr	r3, [pc, #252]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e06f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e067      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f023 0203 	bic.w	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4934      	ldr	r1, [pc, #208]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b4:	f7ff fc5c 	bl	8000a70 <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011bc:	f7ff fc58 	bl	8000a70 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e04f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d2:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 020c 	and.w	r2, r3, #12
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d1eb      	bne.n	80011bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d20c      	bcs.n	800120c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e032      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4916      	ldr	r1, [pc, #88]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	4313      	orrs	r3, r2
 8001228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	490e      	ldr	r1, [pc, #56]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	4313      	orrs	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800124a:	f000 f873 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 800124e:	4602      	mov	r2, r0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	490a      	ldr	r1, [pc, #40]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 800125c:	5ccb      	ldrb	r3, [r1, r3]
 800125e:	fa22 f303 	lsr.w	r3, r2, r3
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_RCC_ClockConfig+0x1c8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fb14 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023c00 	.word	0x40023c00
 8001280:	40023800 	.word	0x40023800
 8001284:	0800565c 	.word	0x0800565c
 8001288:	20000000 	.word	0x20000000
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000

080012a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012ac:	f7ff fff0 	bl	8001290 <HAL_RCC_GetHCLKFreq>
 80012b0:	4602      	mov	r2, r0
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	0a9b      	lsrs	r3, r3, #10
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	4903      	ldr	r1, [pc, #12]	; (80012cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012be:	5ccb      	ldrb	r3, [r1, r3]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	0800566c 	.word	0x0800566c

080012d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	220f      	movs	r2, #15
 80012de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_RCC_GetClockConfig+0x5c>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_RCC_GetClockConfig+0x5c>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_RCC_GetClockConfig+0x5c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_RCC_GetClockConfig+0x5c>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <HAL_RCC_GetClockConfig+0x60>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 020f 	and.w	r2, r3, #15
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	601a      	str	r2, [r3, #0]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40023c00 	.word	0x40023c00

08001334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001338:	b0ae      	sub	sp, #184	; 0xb8
 800133a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800135a:	4bcb      	ldr	r3, [pc, #812]	; (8001688 <HAL_RCC_GetSysClockFreq+0x354>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b0c      	cmp	r3, #12
 8001364:	f200 8206 	bhi.w	8001774 <HAL_RCC_GetSysClockFreq+0x440>
 8001368:	a201      	add	r2, pc, #4	; (adr r2, 8001370 <HAL_RCC_GetSysClockFreq+0x3c>)
 800136a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136e:	bf00      	nop
 8001370:	080013a5 	.word	0x080013a5
 8001374:	08001775 	.word	0x08001775
 8001378:	08001775 	.word	0x08001775
 800137c:	08001775 	.word	0x08001775
 8001380:	080013ad 	.word	0x080013ad
 8001384:	08001775 	.word	0x08001775
 8001388:	08001775 	.word	0x08001775
 800138c:	08001775 	.word	0x08001775
 8001390:	080013b5 	.word	0x080013b5
 8001394:	08001775 	.word	0x08001775
 8001398:	08001775 	.word	0x08001775
 800139c:	08001775 	.word	0x08001775
 80013a0:	080015a5 	.word	0x080015a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013a4:	4bb9      	ldr	r3, [pc, #740]	; (800168c <HAL_RCC_GetSysClockFreq+0x358>)
 80013a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013aa:	e1e7      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013ac:	4bb8      	ldr	r3, [pc, #736]	; (8001690 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013b2:	e1e3      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b4:	4bb4      	ldr	r3, [pc, #720]	; (8001688 <HAL_RCC_GetSysClockFreq+0x354>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013c0:	4bb1      	ldr	r3, [pc, #708]	; (8001688 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d071      	beq.n	80014b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013cc:	4bae      	ldr	r3, [pc, #696]	; (8001688 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	099b      	lsrs	r3, r3, #6
 80013d2:	2200      	movs	r2, #0
 80013d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80013d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80013dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80013ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80013f2:	4622      	mov	r2, r4
 80013f4:	462b      	mov	r3, r5
 80013f6:	f04f 0000 	mov.w	r0, #0
 80013fa:	f04f 0100 	mov.w	r1, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001404:	0150      	lsls	r0, r2, #5
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4621      	mov	r1, r4
 800140c:	1a51      	subs	r1, r2, r1
 800140e:	6439      	str	r1, [r7, #64]	; 0x40
 8001410:	4629      	mov	r1, r5
 8001412:	eb63 0301 	sbc.w	r3, r3, r1
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001424:	4649      	mov	r1, r9
 8001426:	018b      	lsls	r3, r1, #6
 8001428:	4641      	mov	r1, r8
 800142a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800142e:	4641      	mov	r1, r8
 8001430:	018a      	lsls	r2, r1, #6
 8001432:	4641      	mov	r1, r8
 8001434:	1a51      	subs	r1, r2, r1
 8001436:	63b9      	str	r1, [r7, #56]	; 0x38
 8001438:	4649      	mov	r1, r9
 800143a:	eb63 0301 	sbc.w	r3, r3, r1
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800144c:	4649      	mov	r1, r9
 800144e:	00cb      	lsls	r3, r1, #3
 8001450:	4641      	mov	r1, r8
 8001452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001456:	4641      	mov	r1, r8
 8001458:	00ca      	lsls	r2, r1, #3
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	4603      	mov	r3, r0
 8001460:	4622      	mov	r2, r4
 8001462:	189b      	adds	r3, r3, r2
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
 8001466:	462b      	mov	r3, r5
 8001468:	460a      	mov	r2, r1
 800146a:	eb42 0303 	adc.w	r3, r2, r3
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800147c:	4629      	mov	r1, r5
 800147e:	024b      	lsls	r3, r1, #9
 8001480:	4621      	mov	r1, r4
 8001482:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001486:	4621      	mov	r1, r4
 8001488:	024a      	lsls	r2, r1, #9
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001492:	2200      	movs	r2, #0
 8001494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001498:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800149c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014a0:	f7fe ff00 	bl	80002a4 <__aeabi_uldivmod>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4613      	mov	r3, r2
 80014aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014ae:	e067      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b0:	4b75      	ldr	r3, [pc, #468]	; (8001688 <HAL_RCC_GetSysClockFreq+0x354>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	099b      	lsrs	r3, r3, #6
 80014b6:	2200      	movs	r2, #0
 80014b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80014c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80014ca:	2300      	movs	r3, #0
 80014cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80014d2:	4622      	mov	r2, r4
 80014d4:	462b      	mov	r3, r5
 80014d6:	f04f 0000 	mov.w	r0, #0
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	0159      	lsls	r1, r3, #5
 80014e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014e4:	0150      	lsls	r0, r2, #5
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4621      	mov	r1, r4
 80014ec:	1a51      	subs	r1, r2, r1
 80014ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80014f0:	4629      	mov	r1, r5
 80014f2:	eb63 0301 	sbc.w	r3, r3, r1
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001504:	4649      	mov	r1, r9
 8001506:	018b      	lsls	r3, r1, #6
 8001508:	4641      	mov	r1, r8
 800150a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800150e:	4641      	mov	r1, r8
 8001510:	018a      	lsls	r2, r1, #6
 8001512:	4641      	mov	r1, r8
 8001514:	ebb2 0a01 	subs.w	sl, r2, r1
 8001518:	4649      	mov	r1, r9
 800151a:	eb63 0b01 	sbc.w	fp, r3, r1
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800152a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800152e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001532:	4692      	mov	sl, r2
 8001534:	469b      	mov	fp, r3
 8001536:	4623      	mov	r3, r4
 8001538:	eb1a 0303 	adds.w	r3, sl, r3
 800153c:	623b      	str	r3, [r7, #32]
 800153e:	462b      	mov	r3, r5
 8001540:	eb4b 0303 	adc.w	r3, fp, r3
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001552:	4629      	mov	r1, r5
 8001554:	028b      	lsls	r3, r1, #10
 8001556:	4621      	mov	r1, r4
 8001558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800155c:	4621      	mov	r1, r4
 800155e:	028a      	lsls	r2, r1, #10
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001568:	2200      	movs	r2, #0
 800156a:	673b      	str	r3, [r7, #112]	; 0x70
 800156c:	677a      	str	r2, [r7, #116]	; 0x74
 800156e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001572:	f7fe fe97 	bl	80002a4 <__aeabi_uldivmod>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4613      	mov	r3, r2
 800157c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001580:	4b41      	ldr	r3, [pc, #260]	; (8001688 <HAL_RCC_GetSysClockFreq+0x354>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	0c1b      	lsrs	r3, r3, #16
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	3301      	adds	r3, #1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015a2:	e0eb      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <HAL_RCC_GetSysClockFreq+0x354>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d06b      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015bc:	4b32      	ldr	r3, [pc, #200]	; (8001688 <HAL_RCC_GetSysClockFreq+0x354>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	2200      	movs	r2, #0
 80015c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80015c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80015c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ce:	663b      	str	r3, [r7, #96]	; 0x60
 80015d0:	2300      	movs	r3, #0
 80015d2:	667b      	str	r3, [r7, #100]	; 0x64
 80015d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80015d8:	4622      	mov	r2, r4
 80015da:	462b      	mov	r3, r5
 80015dc:	f04f 0000 	mov.w	r0, #0
 80015e0:	f04f 0100 	mov.w	r1, #0
 80015e4:	0159      	lsls	r1, r3, #5
 80015e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015ea:	0150      	lsls	r0, r2, #5
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4621      	mov	r1, r4
 80015f2:	1a51      	subs	r1, r2, r1
 80015f4:	61b9      	str	r1, [r7, #24]
 80015f6:	4629      	mov	r1, r5
 80015f8:	eb63 0301 	sbc.w	r3, r3, r1
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800160a:	4659      	mov	r1, fp
 800160c:	018b      	lsls	r3, r1, #6
 800160e:	4651      	mov	r1, sl
 8001610:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001614:	4651      	mov	r1, sl
 8001616:	018a      	lsls	r2, r1, #6
 8001618:	4651      	mov	r1, sl
 800161a:	ebb2 0801 	subs.w	r8, r2, r1
 800161e:	4659      	mov	r1, fp
 8001620:	eb63 0901 	sbc.w	r9, r3, r1
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001630:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001634:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001638:	4690      	mov	r8, r2
 800163a:	4699      	mov	r9, r3
 800163c:	4623      	mov	r3, r4
 800163e:	eb18 0303 	adds.w	r3, r8, r3
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	462b      	mov	r3, r5
 8001646:	eb49 0303 	adc.w	r3, r9, r3
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001658:	4629      	mov	r1, r5
 800165a:	024b      	lsls	r3, r1, #9
 800165c:	4621      	mov	r1, r4
 800165e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001662:	4621      	mov	r1, r4
 8001664:	024a      	lsls	r2, r1, #9
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800166e:	2200      	movs	r2, #0
 8001670:	65bb      	str	r3, [r7, #88]	; 0x58
 8001672:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001674:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001678:	f7fe fe14 	bl	80002a4 <__aeabi_uldivmod>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4613      	mov	r3, r2
 8001682:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001686:	e065      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x420>
 8001688:	40023800 	.word	0x40023800
 800168c:	00f42400 	.word	0x00f42400
 8001690:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001694:	4b3d      	ldr	r3, [pc, #244]	; (800178c <HAL_RCC_GetSysClockFreq+0x458>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	2200      	movs	r2, #0
 800169c:	4618      	mov	r0, r3
 800169e:	4611      	mov	r1, r2
 80016a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016a4:	653b      	str	r3, [r7, #80]	; 0x50
 80016a6:	2300      	movs	r3, #0
 80016a8:	657b      	str	r3, [r7, #84]	; 0x54
 80016aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016ae:	4642      	mov	r2, r8
 80016b0:	464b      	mov	r3, r9
 80016b2:	f04f 0000 	mov.w	r0, #0
 80016b6:	f04f 0100 	mov.w	r1, #0
 80016ba:	0159      	lsls	r1, r3, #5
 80016bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c0:	0150      	lsls	r0, r2, #5
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4641      	mov	r1, r8
 80016c8:	1a51      	subs	r1, r2, r1
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	4649      	mov	r1, r9
 80016ce:	eb63 0301 	sbc.w	r3, r3, r1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016e0:	4659      	mov	r1, fp
 80016e2:	018b      	lsls	r3, r1, #6
 80016e4:	4651      	mov	r1, sl
 80016e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ea:	4651      	mov	r1, sl
 80016ec:	018a      	lsls	r2, r1, #6
 80016ee:	4651      	mov	r1, sl
 80016f0:	1a54      	subs	r4, r2, r1
 80016f2:	4659      	mov	r1, fp
 80016f4:	eb63 0501 	sbc.w	r5, r3, r1
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	00eb      	lsls	r3, r5, #3
 8001702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001706:	00e2      	lsls	r2, r4, #3
 8001708:	4614      	mov	r4, r2
 800170a:	461d      	mov	r5, r3
 800170c:	4643      	mov	r3, r8
 800170e:	18e3      	adds	r3, r4, r3
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	464b      	mov	r3, r9
 8001714:	eb45 0303 	adc.w	r3, r5, r3
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001726:	4629      	mov	r1, r5
 8001728:	028b      	lsls	r3, r1, #10
 800172a:	4621      	mov	r1, r4
 800172c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001730:	4621      	mov	r1, r4
 8001732:	028a      	lsls	r2, r1, #10
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800173c:	2200      	movs	r2, #0
 800173e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001740:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001742:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001746:	f7fe fdad 	bl	80002a4 <__aeabi_uldivmod>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4613      	mov	r3, r2
 8001750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_RCC_GetSysClockFreq+0x458>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	0f1b      	lsrs	r3, r3, #28
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001766:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001772:	e003      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800177a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800177c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001780:	4618      	mov	r0, r3
 8001782:	37b8      	adds	r7, #184	; 0xb8
 8001784:	46bd      	mov	sp, r7
 8001786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	00f42400 	.word	0x00f42400

08001794 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e28d      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8083 	beq.w	80018ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017b4:	4b94      	ldr	r3, [pc, #592]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d019      	beq.n	80017f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017c0:	4b91      	ldr	r3, [pc, #580]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017cc:	4b8e      	ldr	r3, [pc, #568]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d8:	d00c      	beq.n	80017f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017da:	4b8b      	ldr	r3, [pc, #556]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d112      	bne.n	800180c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e6:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017f2:	d10b      	bne.n	800180c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	4b84      	ldr	r3, [pc, #528]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d05b      	beq.n	80018b8 <HAL_RCC_OscConfig+0x124>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d157      	bne.n	80018b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e25a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001814:	d106      	bne.n	8001824 <HAL_RCC_OscConfig+0x90>
 8001816:	4b7c      	ldr	r3, [pc, #496]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a7b      	ldr	r2, [pc, #492]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e01d      	b.n	8001860 <HAL_RCC_OscConfig+0xcc>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0xb4>
 800182e:	4b76      	ldr	r3, [pc, #472]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a75      	ldr	r2, [pc, #468]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 8001834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b73      	ldr	r3, [pc, #460]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a72      	ldr	r2, [pc, #456]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0xcc>
 8001848:	4b6f      	ldr	r3, [pc, #444]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a6e      	ldr	r2, [pc, #440]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 800184e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6b      	ldr	r2, [pc, #428]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 800185a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d013      	beq.n	8001890 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff f902 	bl	8000a70 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff f8fe 	bl	8000a70 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e21f      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b61      	ldr	r3, [pc, #388]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0xdc>
 800188e:	e014      	b.n	80018ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff f8ee 	bl	8000a70 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff f8ea 	bl	8000a70 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e20b      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	4b57      	ldr	r3, [pc, #348]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x104>
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d06f      	beq.n	80019a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018c6:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d017      	beq.n	8001902 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018d2:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d105      	bne.n	80018ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018de:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d11c      	bne.n	8001930 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f6:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d116      	bne.n	8001930 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x186>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e1d3      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4937      	ldr	r1, [pc, #220]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e03a      	b.n	80019a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_RCC_OscConfig+0x278>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff f897 	bl	8000a70 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff f893 	bl	8000a70 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1b4      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4925      	ldr	r1, [pc, #148]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
 8001978:	e015      	b.n	80019a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_OscConfig+0x278>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff f876 	bl	8000a70 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001988:	f7ff f872 	bl	8000a70 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e193      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d036      	beq.n	8001a20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d016      	beq.n	80019e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_RCC_OscConfig+0x27c>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff f856 	bl	8000a70 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff f852 	bl	8000a70 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e173      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80019dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x234>
 80019e6:	e01b      	b.n	8001a20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_OscConfig+0x27c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff f83f 	bl	8000a70 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f4:	e00e      	b.n	8001a14 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f6:	f7ff f83b 	bl	8000a70 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d907      	bls.n	8001a14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e15c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	42470000 	.word	0x42470000
 8001a10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a14:	4b8a      	ldr	r3, [pc, #552]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1ea      	bne.n	80019f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 8097 	beq.w	8001b5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a32:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10f      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a7e      	ldr	r2, [pc, #504]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b7c      	ldr	r3, [pc, #496]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b79      	ldr	r3, [pc, #484]	; (8001c44 <HAL_RCC_OscConfig+0x4b0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0x4b0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a75      	ldr	r2, [pc, #468]	; (8001c44 <HAL_RCC_OscConfig+0x4b0>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7fe fffb 	bl	8000a70 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7fe fff7 	bl	8000a70 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e118      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b6c      	ldr	r3, [pc, #432]	; (8001c44 <HAL_RCC_OscConfig+0x4b0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x31e>
 8001aa4:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	4a65      	ldr	r2, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab0:	e01c      	b.n	8001aec <HAL_RCC_OscConfig+0x358>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x340>
 8001aba:	4b61      	ldr	r3, [pc, #388]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	4a60      	ldr	r2, [pc, #384]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac6:	4b5e      	ldr	r3, [pc, #376]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	4a5d      	ldr	r2, [pc, #372]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0x358>
 8001ad4:	4b5a      	ldr	r3, [pc, #360]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a59      	ldr	r2, [pc, #356]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	4a56      	ldr	r2, [pc, #344]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	f023 0304 	bic.w	r3, r3, #4
 8001aea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d015      	beq.n	8001b20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7fe ffbc 	bl	8000a70 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7fe ffb8 	bl	8000a70 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e0d7      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0ee      	beq.n	8001afc <HAL_RCC_OscConfig+0x368>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b20:	f7fe ffa6 	bl	8000a70 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b28:	f7fe ffa2 	bl	8000a70 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0c1      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3e:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ee      	bne.n	8001b28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a3a      	ldr	r2, [pc, #232]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80ad 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b66:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d060      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d145      	bne.n	8001c06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <HAL_RCC_OscConfig+0x4b4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7fe ff76 	bl	8000a70 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7fe ff72 	bl	8000a70 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e093      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	019b      	lsls	r3, r3, #6
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	061b      	lsls	r3, r3, #24
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	071b      	lsls	r3, r3, #28
 8001bd2:	491b      	ldr	r1, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x4b4>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7fe ff47 	bl	8000a70 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be6:	f7fe ff43 	bl	8000a70 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e064      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x452>
 8001c04:	e05c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_RCC_OscConfig+0x4b4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7fe ff30 	bl	8000a70 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c14:	f7fe ff2c 	bl	8000a70 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e04d      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x480>
 8001c32:	e045      	b.n	8001cc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e040      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40007000 	.word	0x40007000
 8001c48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_RCC_OscConfig+0x538>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d030      	beq.n	8001cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d129      	bne.n	8001cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d122      	bne.n	8001cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d119      	bne.n	8001cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	3b01      	subs	r3, #1
 8001c96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d10f      	bne.n	8001cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e041      	b.n	8001d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f839 	bl	8001d6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4610      	mov	r0, r2
 8001d10:	f000 f9d8 	bl	80020c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d001      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e04e      	b.n	8001e3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d022      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc6:	d01d      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d018      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d013      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00e      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d004      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d111      	bne.n	8001e28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d010      	beq.n	8001e38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e26:	e007      	b.n	8001e38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40000800 	.word	0x40000800
 8001e54:	40000c00 	.word	0x40000c00
 8001e58:	40010400 	.word	0x40010400
 8001e5c:	40014000 	.word	0x40014000
 8001e60:	40001800 	.word	0x40001800

08001e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d122      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d11b      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0202 	mvn.w	r2, #2
 8001e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8ee 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8e0 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f8f1 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d122      	bne.n	8001f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d11b      	bne.n	8001f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0204 	mvn.w	r2, #4
 8001ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8c4 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8b6 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f8c7 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d122      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d11b      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0208 	mvn.w	r2, #8
 8001f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f89a 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f88c 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f89d 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d122      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d11b      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0210 	mvn.w	r2, #16
 8001f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2208      	movs	r2, #8
 8001f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f870 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f862 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f873 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d107      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0201 	mvn.w	r2, #1
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fc18 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff2:	2b80      	cmp	r3, #128	; 0x80
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002000:	2b80      	cmp	r3, #128	; 0x80
 8002002:	d107      	bne.n	8002014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f902 	bl	8002218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201e:	2b40      	cmp	r3, #64	; 0x40
 8002020:	d10e      	bne.n	8002040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202c:	2b40      	cmp	r3, #64	; 0x40
 800202e:	d107      	bne.n	8002040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f838 	bl	80020b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b20      	cmp	r3, #32
 800204c:	d10e      	bne.n	800206c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b20      	cmp	r3, #32
 800205a:	d107      	bne.n	800206c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0220 	mvn.w	r2, #32
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8cc 	bl	8002204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a40      	ldr	r2, [pc, #256]	; (80021d8 <TIM_Base_SetConfig+0x114>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d013      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e2:	d00f      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a3d      	ldr	r2, [pc, #244]	; (80021dc <TIM_Base_SetConfig+0x118>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00b      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a3c      	ldr	r2, [pc, #240]	; (80021e0 <TIM_Base_SetConfig+0x11c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d007      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a3b      	ldr	r2, [pc, #236]	; (80021e4 <TIM_Base_SetConfig+0x120>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d003      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a3a      	ldr	r2, [pc, #232]	; (80021e8 <TIM_Base_SetConfig+0x124>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d108      	bne.n	8002116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a2f      	ldr	r2, [pc, #188]	; (80021d8 <TIM_Base_SetConfig+0x114>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02b      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002124:	d027      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2c      	ldr	r2, [pc, #176]	; (80021dc <TIM_Base_SetConfig+0x118>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d023      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <TIM_Base_SetConfig+0x11c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01f      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <TIM_Base_SetConfig+0x120>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01b      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <TIM_Base_SetConfig+0x124>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d017      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a28      	ldr	r2, [pc, #160]	; (80021ec <TIM_Base_SetConfig+0x128>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a27      	ldr	r2, [pc, #156]	; (80021f0 <TIM_Base_SetConfig+0x12c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00f      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a26      	ldr	r2, [pc, #152]	; (80021f4 <TIM_Base_SetConfig+0x130>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00b      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a25      	ldr	r2, [pc, #148]	; (80021f8 <TIM_Base_SetConfig+0x134>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d007      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a24      	ldr	r2, [pc, #144]	; (80021fc <TIM_Base_SetConfig+0x138>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d003      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a23      	ldr	r2, [pc, #140]	; (8002200 <TIM_Base_SetConfig+0x13c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d108      	bne.n	8002188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800217c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <TIM_Base_SetConfig+0x114>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d003      	beq.n	80021bc <TIM_Base_SetConfig+0xf8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <TIM_Base_SetConfig+0x124>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d103      	bne.n	80021c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	615a      	str	r2, [r3, #20]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40010400 	.word	0x40010400
 80021ec:	40014000 	.word	0x40014000
 80021f0:	40014400 	.word	0x40014400
 80021f4:	40014800 	.word	0x40014800
 80021f8:	40001800 	.word	0x40001800
 80021fc:	40001c00 	.word	0x40001c00
 8002200:	40002000 	.word	0x40002000

08002204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f103 0208 	add.w	r2, r3, #8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f103 0208 	add.w	r2, r3, #8
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f103 0208 	add.w	r2, r3, #8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6892      	ldr	r2, [r2, #8]
 800229c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6852      	ldr	r2, [r2, #4]
 80022a6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d103      	bne.n	80022ba <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80022da:	b580      	push	{r7, lr}
 80022dc:	b08c      	sub	sp, #48	; 0x30
 80022de:	af04      	add	r7, sp, #16
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 ffd4 	bl	800329c <pvPortMalloc>
 80022f4:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00e      	beq.n	800231a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022fc:	2058      	movs	r0, #88	; 0x58
 80022fe:	f000 ffcd 	bl	800329c <pvPortMalloc>
 8002302:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
 8002310:	e005      	b.n	800231e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f001 f8a2 	bl	800345c <vPortFree>
 8002318:	e001      	b.n	800231e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	2300      	movs	r3, #0
 8002328:	9303      	str	r3, [sp, #12]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	9302      	str	r3, [sp, #8]
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f80e 	bl	800235c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002340:	69f8      	ldr	r0, [r7, #28]
 8002342:	f000 f8af 	bl	80024a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002346:	2301      	movs	r3, #1
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	e002      	b.n	8002352 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002352:	69bb      	ldr	r3, [r7, #24]
    }
 8002354:	4618      	mov	r0, r3
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	461a      	mov	r2, r3
 8002374:	21a5      	movs	r1, #165	; 0xa5
 8002376:	f003 f8ed 	bl	8005554 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002384:	3b01      	subs	r3, #1
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f023 0307 	bic.w	r3, r3, #7
 8002392:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <prvInitialiseNewTask+0x58>
        __asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	617b      	str	r3, [r7, #20]
    }
 80023b0:	bf00      	nop
 80023b2:	e7fe      	b.n	80023b2 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01f      	beq.n	80023fa <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e012      	b.n	80023e6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	7819      	ldrb	r1, [r3, #0]
 80023c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	4413      	add	r3, r2
 80023ce:	3334      	adds	r3, #52	; 0x34
 80023d0:	460a      	mov	r2, r1
 80023d2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	2b09      	cmp	r3, #9
 80023ea:	d9e9      	bls.n	80023c0 <prvInitialiseNewTask+0x64>
 80023ec:	e000      	b.n	80023f0 <prvInitialiseNewTask+0x94>
            {
                break;
 80023ee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80023f8:	e003      	b.n	8002402 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	2b04      	cmp	r3, #4
 8002406:	d90a      	bls.n	800241e <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240c:	f383 8811 	msr	BASEPRI, r3
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	613b      	str	r3, [r7, #16]
    }
 800241a:	bf00      	nop
 800241c:	e7fe      	b.n	800241c <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	2b04      	cmp	r3, #4
 8002422:	d901      	bls.n	8002428 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002424:	2304      	movs	r3, #4
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800242c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002432:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002436:	2200      	movs	r2, #0
 8002438:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	3304      	adds	r3, #4
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff14 	bl	800226c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002446:	3318      	adds	r3, #24
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff0f 	bl	800226c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002452:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	f1c3 0205 	rsb	r2, r3, #5
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002462:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	3350      	adds	r3, #80	; 0x50
 8002468:	2204      	movs	r2, #4
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f003 f871 	bl	8005554 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	3354      	adds	r3, #84	; 0x54
 8002476:	2201      	movs	r2, #1
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f003 f86a 	bl	8005554 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	68f9      	ldr	r1, [r7, #12]
 8002484:	69b8      	ldr	r0, [r7, #24]
 8002486:	f000 fc2f 	bl	8002ce8 <pxPortInitialiseStack>
 800248a:	4602      	mov	r2, r0
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800249a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800249c:	bf00      	nop
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80024a4:	b5b0      	push	{r4, r5, r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80024ac:	f000 fdca 	bl	8003044 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80024b0:	4b49      	ldr	r3, [pc, #292]	; (80025d8 <prvAddNewTaskToReadyList+0x134>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	4a48      	ldr	r2, [pc, #288]	; (80025d8 <prvAddNewTaskToReadyList+0x134>)
 80024b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80024ba:	4b48      	ldr	r3, [pc, #288]	; (80025dc <prvAddNewTaskToReadyList+0x138>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80024c2:	4a46      	ldr	r2, [pc, #280]	; (80025dc <prvAddNewTaskToReadyList+0x138>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024c8:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <prvAddNewTaskToReadyList+0x134>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d110      	bne.n	80024f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80024d0:	f000 fb70 	bl	8002bb4 <prvInitialiseTaskLists>
 80024d4:	e00d      	b.n	80024f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <prvAddNewTaskToReadyList+0x13c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024de:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <prvAddNewTaskToReadyList+0x138>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d802      	bhi.n	80024f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80024ec:	4a3b      	ldr	r2, [pc, #236]	; (80025dc <prvAddNewTaskToReadyList+0x138>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80024f2:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <prvAddNewTaskToReadyList+0x140>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	4a3a      	ldr	r2, [pc, #232]	; (80025e4 <prvAddNewTaskToReadyList+0x140>)
 80024fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <prvAddNewTaskToReadyList+0x140>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d016      	beq.n	8002538 <prvAddNewTaskToReadyList+0x94>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fdb3 	bl	8005078 <SEGGER_SYSVIEW_OnTaskCreate>
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	461d      	mov	r5, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	461c      	mov	r4, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	1ae3      	subs	r3, r4, r3
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	462b      	mov	r3, r5
 8002534:	f001 f960 	bl	80037f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4618      	mov	r0, r3
 800253c:	f002 fe20 	bl	8005180 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	2201      	movs	r2, #1
 8002546:	409a      	lsls	r2, r3
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <prvAddNewTaskToReadyList+0x144>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4313      	orrs	r3, r2
 800254e:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <prvAddNewTaskToReadyList+0x144>)
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002556:	4925      	ldr	r1, [pc, #148]	; (80025ec <prvAddNewTaskToReadyList+0x148>)
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3304      	adds	r3, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	3204      	adds	r2, #4
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	1d1a      	adds	r2, r3, #4
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4a15      	ldr	r2, [pc, #84]	; (80025ec <prvAddNewTaskToReadyList+0x148>)
 8002596:	441a      	add	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	615a      	str	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a0:	4912      	ldr	r1, [pc, #72]	; (80025ec <prvAddNewTaskToReadyList+0x148>)
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1c59      	adds	r1, r3, #1
 80025b0:	480e      	ldr	r0, [pc, #56]	; (80025ec <prvAddNewTaskToReadyList+0x148>)
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4403      	add	r3, r0
 80025bc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80025be:	f000 fd71 	bl	80030a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <prvAddNewTaskToReadyList+0x13c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <prvAddNewTaskToReadyList+0x138>)
 80025cc:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bdb0      	pop	{r4, r5, r7, pc}
 80025d6:	bf00      	nop
 80025d8:	2000015c 	.word	0x2000015c
 80025dc:	20000084 	.word	0x20000084
 80025e0:	20000168 	.word	0x20000168
 80025e4:	20000178 	.word	0x20000178
 80025e8:	20000164 	.word	0x20000164
 80025ec:	20000088 	.word	0x20000088

080025f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <vTaskStartScheduler+0x98>)
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	2300      	movs	r3, #0
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2300      	movs	r3, #0
 8002600:	2282      	movs	r2, #130	; 0x82
 8002602:	4922      	ldr	r1, [pc, #136]	; (800268c <vTaskStartScheduler+0x9c>)
 8002604:	4822      	ldr	r0, [pc, #136]	; (8002690 <vTaskStartScheduler+0xa0>)
 8002606:	f7ff fe68 	bl	80022da <xTaskCreate>
 800260a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d124      	bne.n	800265c <vTaskStartScheduler+0x6c>
        __asm volatile
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	60bb      	str	r3, [r7, #8]
    }
 8002624:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002626:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <vTaskStartScheduler+0xa4>)
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800262e:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <vTaskStartScheduler+0xa8>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <vTaskStartScheduler+0xac>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <vTaskStartScheduler+0xb0>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <vTaskStartScheduler+0x98>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d102      	bne.n	800264c <vTaskStartScheduler+0x5c>
 8002646:	f002 fcfb 	bl	8005040 <SEGGER_SYSVIEW_OnIdle>
 800264a:	e004      	b.n	8002656 <vTaskStartScheduler+0x66>
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <vTaskStartScheduler+0xb0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fd53 	bl	80050fc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002656:	f000 fbd5 	bl	8002e04 <xPortStartScheduler>
 800265a:	e00e      	b.n	800267a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002662:	d10a      	bne.n	800267a <vTaskStartScheduler+0x8a>
        __asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	607b      	str	r3, [r7, #4]
    }
 8002676:	bf00      	nop
 8002678:	e7fe      	b.n	8002678 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <vTaskStartScheduler+0xb4>)
 800267c:	681b      	ldr	r3, [r3, #0]
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000180 	.word	0x20000180
 800268c:	0800558c 	.word	0x0800558c
 8002690:	08002b91 	.word	0x08002b91
 8002694:	2000017c 	.word	0x2000017c
 8002698:	20000168 	.word	0x20000168
 800269c:	20000160 	.word	0x20000160
 80026a0:	20000084 	.word	0x20000084
 80026a4:	2000000c 	.word	0x2000000c

080026a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <vTaskSuspendAll+0x18>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	4a03      	ldr	r2, [pc, #12]	; (80026c0 <vTaskSuspendAll+0x18>)
 80026b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	20000184 	.word	0x20000184

080026c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80026d2:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <xTaskResumeAll+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <xTaskResumeAll+0x2c>
        __asm volatile
 80026da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	607b      	str	r3, [r7, #4]
    }
 80026ec:	bf00      	nop
 80026ee:	e7fe      	b.n	80026ee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80026f0:	f000 fca8 	bl	8003044 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80026f4:	4b64      	ldr	r3, [pc, #400]	; (8002888 <xTaskResumeAll+0x1c4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	4a63      	ldr	r2, [pc, #396]	; (8002888 <xTaskResumeAll+0x1c4>)
 80026fc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026fe:	4b62      	ldr	r3, [pc, #392]	; (8002888 <xTaskResumeAll+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 80b8 	bne.w	8002878 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002708:	4b60      	ldr	r3, [pc, #384]	; (800288c <xTaskResumeAll+0x1c8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80b3 	beq.w	8002878 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002712:	e08e      	b.n	8002832 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002714:	4b5e      	ldr	r3, [pc, #376]	; (8002890 <xTaskResumeAll+0x1cc>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	6a12      	ldr	r2, [r2, #32]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	69d2      	ldr	r2, [r2, #28]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3318      	adds	r3, #24
 800273e:	429a      	cmp	r2, r3
 8002740:	d103      	bne.n	800274a <xTaskResumeAll+0x86>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	6a1a      	ldr	r2, [r3, #32]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2200      	movs	r2, #0
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	1e5a      	subs	r2, r3, #1
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	68d2      	ldr	r2, [r2, #12]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	6892      	ldr	r2, [r2, #8]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3304      	adds	r3, #4
 800277c:	429a      	cmp	r2, r3
 800277e:	d103      	bne.n	8002788 <xTaskResumeAll+0xc4>
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2200      	movs	r2, #0
 800278c:	615a      	str	r2, [r3, #20]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	1e5a      	subs	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4618      	mov	r0, r3
 800279c:	f002 fcf0 	bl	8005180 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	2201      	movs	r2, #1
 80027a6:	409a      	lsls	r2, r3
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <xTaskResumeAll+0x1d0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	4a39      	ldr	r2, [pc, #228]	; (8002894 <xTaskResumeAll+0x1d0>)
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b6:	4938      	ldr	r1, [pc, #224]	; (8002898 <xTaskResumeAll+0x1d4>)
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	3304      	adds	r3, #4
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	3204      	adds	r2, #4
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	1d1a      	adds	r2, r3, #4
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4a28      	ldr	r2, [pc, #160]	; (8002898 <xTaskResumeAll+0x1d4>)
 80027f6:	441a      	add	r2, r3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	615a      	str	r2, [r3, #20]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002800:	4925      	ldr	r1, [pc, #148]	; (8002898 <xTaskResumeAll+0x1d4>)
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	1c59      	adds	r1, r3, #1
 8002810:	4821      	ldr	r0, [pc, #132]	; (8002898 <xTaskResumeAll+0x1d4>)
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4403      	add	r3, r0
 800281c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002822:	4b1e      	ldr	r3, [pc, #120]	; (800289c <xTaskResumeAll+0x1d8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	429a      	cmp	r2, r3
 800282a:	d302      	bcc.n	8002832 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 800282c:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <xTaskResumeAll+0x1dc>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <xTaskResumeAll+0x1cc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f47f af6c 	bne.w	8002714 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002842:	f000 fa35 	bl	8002cb0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <xTaskResumeAll+0x1e0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d010      	beq.n	8002874 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002852:	f000 f83b 	bl	80028cc <xTaskIncrementTick>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 800285c:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <xTaskResumeAll+0x1dc>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	3b01      	subs	r3, #1
 8002866:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f1      	bne.n	8002852 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <xTaskResumeAll+0x1e0>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <xTaskResumeAll+0x1dc>)
 8002876:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002878:	f000 fc14 	bl	80030a4 <vPortExitCritical>

    return xAlreadyYielded;
 800287c:	697b      	ldr	r3, [r7, #20]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000184 	.word	0x20000184
 800288c:	2000015c 	.word	0x2000015c
 8002890:	2000011c 	.word	0x2000011c
 8002894:	20000164 	.word	0x20000164
 8002898:	20000088 	.word	0x20000088
 800289c:	20000084 	.word	0x20000084
 80028a0:	20000170 	.word	0x20000170
 80028a4:	2000016c 	.word	0x2000016c

080028a8 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028ae:	f000 fcb5 	bl	800321c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <xTaskGetTickCountFromISR+0x20>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80028bc:	683b      	ldr	r3, [r7, #0]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000160 	.word	0x20000160

080028cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028d6:	4b70      	ldr	r3, [pc, #448]	; (8002a98 <xTaskIncrementTick+0x1cc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 80d1 	bne.w	8002a82 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028e0:	4b6e      	ldr	r3, [pc, #440]	; (8002a9c <xTaskIncrementTick+0x1d0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80028e8:	4a6c      	ldr	r2, [pc, #432]	; (8002a9c <xTaskIncrementTick+0x1d0>)
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d120      	bne.n	8002936 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80028f4:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <xTaskIncrementTick+0x1d4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <xTaskIncrementTick+0x48>
        __asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	607b      	str	r3, [r7, #4]
    }
 8002910:	bf00      	nop
 8002912:	e7fe      	b.n	8002912 <xTaskIncrementTick+0x46>
 8002914:	4b62      	ldr	r3, [pc, #392]	; (8002aa0 <xTaskIncrementTick+0x1d4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	4b62      	ldr	r3, [pc, #392]	; (8002aa4 <xTaskIncrementTick+0x1d8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a60      	ldr	r2, [pc, #384]	; (8002aa0 <xTaskIncrementTick+0x1d4>)
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4a60      	ldr	r2, [pc, #384]	; (8002aa4 <xTaskIncrementTick+0x1d8>)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	4b5f      	ldr	r3, [pc, #380]	; (8002aa8 <xTaskIncrementTick+0x1dc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	4a5e      	ldr	r2, [pc, #376]	; (8002aa8 <xTaskIncrementTick+0x1dc>)
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	f000 f9bd 	bl	8002cb0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002936:	4b5d      	ldr	r3, [pc, #372]	; (8002aac <xTaskIncrementTick+0x1e0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a3a      	ldr	r2, [r7, #32]
 800293c:	429a      	cmp	r2, r3
 800293e:	f0c0 80a5 	bcc.w	8002a8c <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002942:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <xTaskIncrementTick+0x1d4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800294c:	4b57      	ldr	r3, [pc, #348]	; (8002aac <xTaskIncrementTick+0x1e0>)
 800294e:	f04f 32ff 	mov.w	r2, #4294967295
 8002952:	601a      	str	r2, [r3, #0]
                    break;
 8002954:	e09a      	b.n	8002a8c <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002956:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <xTaskIncrementTick+0x1d4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002966:	6a3a      	ldr	r2, [r7, #32]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	429a      	cmp	r2, r3
 800296c:	d203      	bcs.n	8002976 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800296e:	4a4f      	ldr	r2, [pc, #316]	; (8002aac <xTaskIncrementTick+0x1e0>)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002974:	e08a      	b.n	8002a8c <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	68d2      	ldr	r2, [r2, #12]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	6892      	ldr	r2, [r2, #8]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	3304      	adds	r3, #4
 8002998:	429a      	cmp	r2, r3
 800299a:	d103      	bne.n	80029a4 <xTaskIncrementTick+0xd8>
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01e      	beq.n	80029fa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	6a12      	ldr	r2, [r2, #32]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	69d2      	ldr	r2, [r2, #28]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	3318      	adds	r3, #24
 80029de:	429a      	cmp	r2, r3
 80029e0:	d103      	bne.n	80029ea <xTaskIncrementTick+0x11e>
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	6a1a      	ldr	r2, [r3, #32]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2200      	movs	r2, #0
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1e5a      	subs	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f002 fbbf 	bl	8005180 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	2201      	movs	r2, #1
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <xTaskIncrementTick+0x1e4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <xTaskIncrementTick+0x1e4>)
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a18:	4926      	ldr	r1, [pc, #152]	; (8002ab4 <xTaskIncrementTick+0x1e8>)
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3304      	adds	r3, #4
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	60da      	str	r2, [r3, #12]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	3204      	adds	r2, #4
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1d1a      	adds	r2, r3, #4
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <xTaskIncrementTick+0x1e8>)
 8002a58:	441a      	add	r2, r3
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	615a      	str	r2, [r3, #20]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a62:	4914      	ldr	r1, [pc, #80]	; (8002ab4 <xTaskIncrementTick+0x1e8>)
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	1c59      	adds	r1, r3, #1
 8002a72:	4810      	ldr	r0, [pc, #64]	; (8002ab4 <xTaskIncrementTick+0x1e8>)
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4403      	add	r3, r0
 8002a7e:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a80:	e75f      	b.n	8002942 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <xTaskIncrementTick+0x1ec>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <xTaskIncrementTick+0x1ec>)
 8002a8a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3728      	adds	r7, #40	; 0x28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000184 	.word	0x20000184
 8002a9c:	20000160 	.word	0x20000160
 8002aa0:	20000114 	.word	0x20000114
 8002aa4:	20000118 	.word	0x20000118
 8002aa8:	20000174 	.word	0x20000174
 8002aac:	2000017c 	.word	0x2000017c
 8002ab0:	20000164 	.word	0x20000164
 8002ab4:	20000088 	.word	0x20000088
 8002ab8:	2000016c 	.word	0x2000016c

08002abc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <vTaskSwitchContext+0xbc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <vTaskSwitchContext+0xc0>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002ad0:	e04d      	b.n	8002b6e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002ad2:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <vTaskSwitchContext+0xc0>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ad8:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <vTaskSwitchContext+0xc4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002ae6:	7afb      	ldrb	r3, [r7, #11]
 8002ae8:	f1c3 031f 	rsb	r3, r3, #31
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	4925      	ldr	r1, [pc, #148]	; (8002b84 <vTaskSwitchContext+0xc8>)
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10a      	bne.n	8002b18 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	607b      	str	r3, [r7, #4]
    }
 8002b14:	bf00      	nop
 8002b16:	e7fe      	b.n	8002b16 <vTaskSwitchContext+0x5a>
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <vTaskSwitchContext+0xc8>)
 8002b24:	4413      	add	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	3308      	adds	r3, #8
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d104      	bne.n	8002b48 <vTaskSwitchContext+0x8c>
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <vTaskSwitchContext+0xcc>)
 8002b50:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <vTaskSwitchContext+0xcc>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <vTaskSwitchContext+0xd0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d102      	bne.n	8002b64 <vTaskSwitchContext+0xa8>
 8002b5e:	f002 fa6f 	bl	8005040 <SEGGER_SYSVIEW_OnIdle>
}
 8002b62:	e004      	b.n	8002b6e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <vTaskSwitchContext+0xcc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f002 fac7 	bl	80050fc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000184 	.word	0x20000184
 8002b7c:	20000170 	.word	0x20000170
 8002b80:	20000164 	.word	0x20000164
 8002b84:	20000088 	.word	0x20000088
 8002b88:	20000084 	.word	0x20000084
 8002b8c:	20000180 	.word	0x20000180

08002b90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b98:	f000 f84c 	bl	8002c34 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <prvIdleTask+0x20>)
 8002b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002bac:	e7f4      	b.n	8002b98 <prvIdleTask+0x8>
 8002bae:	bf00      	nop
 8002bb0:	e000ed04 	.word	0xe000ed04

08002bb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	e00c      	b.n	8002bda <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <prvInitialiseTaskLists+0x60>)
 8002bcc:	4413      	add	r3, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fb2c 	bl	800222c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d9ef      	bls.n	8002bc0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002be0:	480d      	ldr	r0, [pc, #52]	; (8002c18 <prvInitialiseTaskLists+0x64>)
 8002be2:	f7ff fb23 	bl	800222c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002be6:	480d      	ldr	r0, [pc, #52]	; (8002c1c <prvInitialiseTaskLists+0x68>)
 8002be8:	f7ff fb20 	bl	800222c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002bec:	480c      	ldr	r0, [pc, #48]	; (8002c20 <prvInitialiseTaskLists+0x6c>)
 8002bee:	f7ff fb1d 	bl	800222c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002bf2:	480c      	ldr	r0, [pc, #48]	; (8002c24 <prvInitialiseTaskLists+0x70>)
 8002bf4:	f7ff fb1a 	bl	800222c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002bf8:	480b      	ldr	r0, [pc, #44]	; (8002c28 <prvInitialiseTaskLists+0x74>)
 8002bfa:	f7ff fb17 	bl	800222c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <prvInitialiseTaskLists+0x78>)
 8002c00:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <prvInitialiseTaskLists+0x64>)
 8002c02:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <prvInitialiseTaskLists+0x7c>)
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <prvInitialiseTaskLists+0x68>)
 8002c08:	601a      	str	r2, [r3, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000088 	.word	0x20000088
 8002c18:	200000ec 	.word	0x200000ec
 8002c1c:	20000100 	.word	0x20000100
 8002c20:	2000011c 	.word	0x2000011c
 8002c24:	20000130 	.word	0x20000130
 8002c28:	20000148 	.word	0x20000148
 8002c2c:	20000114 	.word	0x20000114
 8002c30:	20000118 	.word	0x20000118

08002c34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c3a:	e019      	b.n	8002c70 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002c3c:	f000 fa02 	bl	8003044 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <prvCheckTasksWaitingTermination+0x50>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fb1a 	bl	8002286 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <prvCheckTasksWaitingTermination+0x54>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <prvCheckTasksWaitingTermination+0x54>)
 8002c5a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <prvCheckTasksWaitingTermination+0x58>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <prvCheckTasksWaitingTermination+0x58>)
 8002c64:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c66:	f000 fa1d 	bl	80030a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f810 	bl	8002c90 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <prvCheckTasksWaitingTermination+0x58>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e1      	bne.n	8002c3c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000130 	.word	0x20000130
 8002c88:	2000015c 	.word	0x2000015c
 8002c8c:	20000144 	.word	0x20000144

08002c90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fbdd 	bl	800345c <vPortFree>
                vPortFree( pxTCB );
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fbda 	bl	800345c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <prvResetNextTaskUnblockTime+0x30>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <prvResetNextTaskUnblockTime+0x34>)
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002cc6:	e005      	b.n	8002cd4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <prvResetNextTaskUnblockTime+0x30>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <prvResetNextTaskUnblockTime+0x34>)
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000114 	.word	0x20000114
 8002ce4:	2000017c 	.word	0x2000017c

08002ce8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3b04      	subs	r3, #4
 8002d06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f023 0201 	bic.w	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3b04      	subs	r3, #4
 8002d16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002d18:	4a0c      	ldr	r2, [pc, #48]	; (8002d4c <pxPortInitialiseStack+0x64>)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3b14      	subs	r3, #20
 8002d22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3b04      	subs	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f06f 0202 	mvn.w	r2, #2
 8002d36:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3b20      	subs	r3, #32
 8002d3c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	08002d51 	.word	0x08002d51

08002d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <prvTaskExitError+0x54>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d00a      	beq.n	8002d7a <prvTaskExitError+0x2a>
        __asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	60fb      	str	r3, [r7, #12]
    }
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <prvTaskExitError+0x28>
        __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	60bb      	str	r3, [r7, #8]
    }
 8002d8c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d8e:	bf00      	nop
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0fc      	beq.n	8002d90 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d96:	bf00      	nop
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	20000010 	.word	0x20000010
	...

08002db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <pxCurrentTCBConst2>)
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	6808      	ldr	r0, [r1, #0]
 8002db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dba:	f380 8809 	msr	PSP, r0
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f380 8811 	msr	BASEPRI, r0
 8002dca:	4770      	bx	lr
 8002dcc:	f3af 8000 	nop.w

08002dd0 <pxCurrentTCBConst2>:
 8002dd0:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop

08002dd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <prvPortStartFirstTask+0x24>)
 8002dda:	6800      	ldr	r0, [r0, #0]
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f380 8808 	msr	MSP, r0
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f380 8814 	msr	CONTROL, r0
 8002dea:	b662      	cpsie	i
 8002dec:	b661      	cpsie	f
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	df00      	svc	0
 8002df8:	bf00      	nop
 8002dfa:	0000      	.short	0x0000
 8002dfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop

08002e04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e0a:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <xPortStartScheduler+0x120>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <xPortStartScheduler+0x124>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d10a      	bne.n	8002e2a <xPortStartScheduler+0x26>
        __asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	613b      	str	r3, [r7, #16]
    }
 8002e26:	bf00      	nop
 8002e28:	e7fe      	b.n	8002e28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <xPortStartScheduler+0x120>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a3f      	ldr	r2, [pc, #252]	; (8002f2c <xPortStartScheduler+0x128>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10a      	bne.n	8002e4a <xPortStartScheduler+0x46>
        __asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	60fb      	str	r3, [r7, #12]
    }
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <xPortStartScheduler+0x12c>)
 8002e4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <xPortStartScheduler+0x130>)
 8002e70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e74:	2207      	movs	r2, #7
 8002e76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e78:	e009      	b.n	8002e8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	4a2d      	ldr	r2, [pc, #180]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d0ef      	beq.n	8002e7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e9a:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d00a      	beq.n	8002ebc <xPortStartScheduler+0xb8>
        __asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	60bb      	str	r3, [r7, #8]
    }
 8002eb8:	bf00      	nop
 8002eba:	e7fe      	b.n	8002eba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ec4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ece:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ed0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <xPortStartScheduler+0x138>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <xPortStartScheduler+0x138>)
 8002ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <xPortStartScheduler+0x138>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a14      	ldr	r2, [pc, #80]	; (8002f3c <xPortStartScheduler+0x138>)
 8002eec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ef2:	f000 f963 	bl	80031bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <xPortStartScheduler+0x13c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002efc:	f000 f982 	bl	8003204 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f00:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <xPortStartScheduler+0x140>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <xPortStartScheduler+0x140>)
 8002f06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002f0c:	f7ff ff64 	bl	8002dd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f10:	f7ff fdd4 	bl	8002abc <vTaskSwitchContext>
    prvTaskExitError();
 8002f14:	f7ff ff1c 	bl	8002d50 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00
 8002f28:	410fc271 	.word	0x410fc271
 8002f2c:	410fc270 	.word	0x410fc270
 8002f30:	e000e400 	.word	0xe000e400
 8002f34:	20000188 	.word	0x20000188
 8002f38:	2000018c 	.word	0x2000018c
 8002f3c:	e000ed20 	.word	0xe000ed20
 8002f40:	20000010 	.word	0x20000010
 8002f44:	e000ef34 	.word	0xe000ef34

08002f48 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f4e:	4b37      	ldr	r3, [pc, #220]	; (800302c <vInitPrioGroupValue+0xe4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a37      	ldr	r2, [pc, #220]	; (8003030 <vInitPrioGroupValue+0xe8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d10a      	bne.n	8002f6e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	613b      	str	r3, [r7, #16]
    }
 8002f6a:	bf00      	nop
 8002f6c:	e7fe      	b.n	8002f6c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f6e:	4b2f      	ldr	r3, [pc, #188]	; (800302c <vInitPrioGroupValue+0xe4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a30      	ldr	r2, [pc, #192]	; (8003034 <vInitPrioGroupValue+0xec>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d10a      	bne.n	8002f8e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	60fb      	str	r3, [r7, #12]
    }
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <vInitPrioGroupValue+0xf0>)
 8002f90:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	22ff      	movs	r2, #255	; 0xff
 8002f9e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <vInitPrioGroupValue+0xf4>)
 8002fb4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8002fb8:	2207      	movs	r2, #7
 8002fba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fbc:	e009      	b.n	8002fd2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8002fc6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b80      	cmp	r3, #128	; 0x80
 8002fdc:	d0ef      	beq.n	8002fbe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1c3 0307 	rsb	r3, r3, #7
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d00a      	beq.n	8003000 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	60bb      	str	r3, [r7, #8]
    }
 8002ffc:	bf00      	nop
 8002ffe:	e7fe      	b.n	8002ffe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8003008:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <vInitPrioGroupValue+0xf8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003012:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <vInitPrioGroupValue+0xf8>)
 8003014:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00
 8003030:	410fc271 	.word	0x410fc271
 8003034:	410fc270 	.word	0x410fc270
 8003038:	e000e400 	.word	0xe000e400
 800303c:	20000188 	.word	0x20000188
 8003040:	2000018c 	.word	0x2000018c

08003044 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
        __asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	607b      	str	r3, [r7, #4]
    }
 800305c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <vPortEnterCritical+0x58>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3301      	adds	r3, #1
 8003064:	4a0d      	ldr	r2, [pc, #52]	; (800309c <vPortEnterCritical+0x58>)
 8003066:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <vPortEnterCritical+0x58>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10f      	bne.n	8003090 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <vPortEnterCritical+0x5c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <vPortEnterCritical+0x4c>
        __asm volatile
 800307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	603b      	str	r3, [r7, #0]
    }
 800308c:	bf00      	nop
 800308e:	e7fe      	b.n	800308e <vPortEnterCritical+0x4a>
    }
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	20000010 	.word	0x20000010
 80030a0:	e000ed04 	.word	0xe000ed04

080030a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <vPortExitCritical+0x50>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <vPortExitCritical+0x24>
        __asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	607b      	str	r3, [r7, #4]
    }
 80030c4:	bf00      	nop
 80030c6:	e7fe      	b.n	80030c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <vPortExitCritical+0x50>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <vPortExitCritical+0x50>)
 80030d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <vPortExitCritical+0x50>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <vPortExitCritical+0x42>
 80030da:	2300      	movs	r3, #0
 80030dc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80030e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000010 	.word	0x20000010
	...

08003100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003100:	f3ef 8009 	mrs	r0, PSP
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	4b15      	ldr	r3, [pc, #84]	; (8003160 <pxCurrentTCBConst>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f01e 0f10 	tst.w	lr, #16
 8003110:	bf08      	it	eq
 8003112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311a:	6010      	str	r0, [r2, #0]
 800311c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003124:	f380 8811 	msr	BASEPRI, r0
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f7ff fcc4 	bl	8002abc <vTaskSwitchContext>
 8003134:	f04f 0000 	mov.w	r0, #0
 8003138:	f380 8811 	msr	BASEPRI, r0
 800313c:	bc09      	pop	{r0, r3}
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	6808      	ldr	r0, [r1, #0]
 8003142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003146:	f01e 0f10 	tst.w	lr, #16
 800314a:	bf08      	it	eq
 800314c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003150:	f380 8809 	msr	PSP, r0
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	f3af 8000 	nop.w

08003160 <pxCurrentTCBConst>:
 8003160:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop

08003168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
        __asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	607b      	str	r3, [r7, #4]
    }
 8003180:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003182:	f001 fee3 	bl	8004f4c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003186:	f7ff fba1 	bl	80028cc <xTaskIncrementTick>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003190:	f001 ff3a 	bl	8005008 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <SysTick_Handler+0x50>)
 8003196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e001      	b.n	80031a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800319e:	f001 ff17 	bl	8004fd0 <SEGGER_SYSVIEW_RecordExitISR>
 80031a2:	2300      	movs	r3, #0
 80031a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f383 8811 	msr	BASEPRI, r3
    }
 80031ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <vPortSetupTimerInterrupt+0x34>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <vPortSetupTimerInterrupt+0x38>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <vPortSetupTimerInterrupt+0x3c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <vPortSetupTimerInterrupt+0x40>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	4a09      	ldr	r2, [pc, #36]	; (8003200 <vPortSetupTimerInterrupt+0x44>)
 80031da:	3b01      	subs	r3, #1
 80031dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <vPortSetupTimerInterrupt+0x34>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010
 80031f4:	e000e018 	.word	0xe000e018
 80031f8:	20000000 	.word	0x20000000
 80031fc:	10624dd3 	.word	0x10624dd3
 8003200:	e000e014 	.word	0xe000e014

08003204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003214 <vPortEnableVFP+0x10>
 8003208:	6801      	ldr	r1, [r0, #0]
 800320a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800320e:	6001      	str	r1, [r0, #0]
 8003210:	4770      	bx	lr
 8003212:	0000      	.short	0x0000
 8003214:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop

0800321c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003222:	f3ef 8305 	mrs	r3, IPSR
 8003226:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	d914      	bls.n	8003258 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <vPortValidateInterruptPriority+0x70>)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <vPortValidateInterruptPriority+0x74>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	7afa      	ldrb	r2, [r7, #11]
 800323e:	429a      	cmp	r2, r3
 8003240:	d20a      	bcs.n	8003258 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	607b      	str	r3, [r7, #4]
    }
 8003254:	bf00      	nop
 8003256:	e7fe      	b.n	8003256 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <vPortValidateInterruptPriority+0x78>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <vPortValidateInterruptPriority+0x7c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d90a      	bls.n	800327e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	603b      	str	r3, [r7, #0]
    }
 800327a:	bf00      	nop
 800327c:	e7fe      	b.n	800327c <vPortValidateInterruptPriority+0x60>
    }
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000e3f0 	.word	0xe000e3f0
 8003290:	20000188 	.word	0x20000188
 8003294:	e000ed0c 	.word	0xe000ed0c
 8003298:	2000018c 	.word	0x2000018c

0800329c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	; 0x28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80032a8:	f7ff f9fe 	bl	80026a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80032ac:	4b65      	ldr	r3, [pc, #404]	; (8003444 <pvPortMalloc+0x1a8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80032b4:	f000 f934 	bl	8003520 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80032b8:	4b63      	ldr	r3, [pc, #396]	; (8003448 <pvPortMalloc+0x1ac>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f040 80a7 	bne.w	8003414 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d02d      	beq.n	8003328 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80032cc:	2208      	movs	r2, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d227      	bcs.n	8003328 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80032d8:	2208      	movs	r2, #8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d021      	beq.n	800332e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f023 0307 	bic.w	r3, r3, #7
 80032f0:	3308      	adds	r3, #8
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d214      	bcs.n	8003322 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f023 0307 	bic.w	r3, r3, #7
 80032fe:	3308      	adds	r3, #8
 8003300:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <pvPortMalloc+0x92>
        __asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	617b      	str	r3, [r7, #20]
    }
 800331e:	bf00      	nop
 8003320:	e7fe      	b.n	8003320 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003326:	e002      	b.n	800332e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	e000      	b.n	8003330 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800332e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d06e      	beq.n	8003414 <pvPortMalloc+0x178>
 8003336:	4b45      	ldr	r3, [pc, #276]	; (800344c <pvPortMalloc+0x1b0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d869      	bhi.n	8003414 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003340:	4b43      	ldr	r3, [pc, #268]	; (8003450 <pvPortMalloc+0x1b4>)
 8003342:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003344:	4b42      	ldr	r3, [pc, #264]	; (8003450 <pvPortMalloc+0x1b4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800334a:	e004      	b.n	8003356 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	d903      	bls.n	8003368 <pvPortMalloc+0xcc>
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f1      	bne.n	800334c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003368:	4b36      	ldr	r3, [pc, #216]	; (8003444 <pvPortMalloc+0x1a8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336e:	429a      	cmp	r2, r3
 8003370:	d050      	beq.n	8003414 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2208      	movs	r2, #8
 8003378:	4413      	add	r3, r2
 800337a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	1ad2      	subs	r2, r2, r3
 800338c:	2308      	movs	r3, #8
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	429a      	cmp	r2, r3
 8003392:	d91f      	bls.n	80033d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <pvPortMalloc+0x120>
        __asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	613b      	str	r3, [r7, #16]
    }
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	1ad2      	subs	r2, r2, r3
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033ce:	69b8      	ldr	r0, [r7, #24]
 80033d0:	f000 f908 	bl	80035e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <pvPortMalloc+0x1b0>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	4a1b      	ldr	r2, [pc, #108]	; (800344c <pvPortMalloc+0x1b0>)
 80033e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033e2:	4b1a      	ldr	r3, [pc, #104]	; (800344c <pvPortMalloc+0x1b0>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <pvPortMalloc+0x1b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d203      	bcs.n	80033f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <pvPortMalloc+0x1b0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <pvPortMalloc+0x1b8>)
 80033f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <pvPortMalloc+0x1ac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	431a      	orrs	r2, r3
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <pvPortMalloc+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	4a11      	ldr	r2, [pc, #68]	; (8003458 <pvPortMalloc+0x1bc>)
 8003412:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003414:	f7ff f956 	bl	80026c4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <pvPortMalloc+0x19c>
        __asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	60fb      	str	r3, [r7, #12]
    }
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <pvPortMalloc+0x19a>
    return pvReturn;
 8003438:	69fb      	ldr	r3, [r7, #28]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3728      	adds	r7, #40	; 0x28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20012d98 	.word	0x20012d98
 8003448:	20012dac 	.word	0x20012dac
 800344c:	20012d9c 	.word	0x20012d9c
 8003450:	20012d90 	.word	0x20012d90
 8003454:	20012da0 	.word	0x20012da0
 8003458:	20012da4 	.word	0x20012da4

0800345c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d04d      	beq.n	800350a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800346e:	2308      	movs	r3, #8
 8003470:	425b      	negs	r3, r3
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4413      	add	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	4b24      	ldr	r3, [pc, #144]	; (8003514 <vPortFree+0xb8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <vPortFree+0x44>
        __asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	60fb      	str	r3, [r7, #12]
    }
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <vPortFree+0x62>
        __asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	60bb      	str	r3, [r7, #8]
    }
 80034ba:	bf00      	nop
 80034bc:	e7fe      	b.n	80034bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <vPortFree+0xb8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01e      	beq.n	800350a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d11a      	bne.n	800350a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <vPortFree+0xb8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	43db      	mvns	r3, r3
 80034de:	401a      	ands	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80034e4:	f7ff f8e0 	bl	80026a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <vPortFree+0xbc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <vPortFree+0xbc>)
 80034f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034f6:	6938      	ldr	r0, [r7, #16]
 80034f8:	f000 f874 	bl	80035e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <vPortFree+0xc0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	4a06      	ldr	r2, [pc, #24]	; (800351c <vPortFree+0xc0>)
 8003504:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003506:	f7ff f8dd 	bl	80026c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20012dac 	.word	0x20012dac
 8003518:	20012d9c 	.word	0x20012d9c
 800351c:	20012da8 	.word	0x20012da8

08003520 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003526:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800352a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800352c:	4b27      	ldr	r3, [pc, #156]	; (80035cc <prvHeapInit+0xac>)
 800352e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3307      	adds	r3, #7
 800353e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0307 	bic.w	r3, r3, #7
 8003546:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <prvHeapInit+0xac>)
 8003550:	4413      	add	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003558:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <prvHeapInit+0xb0>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800355e:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <prvHeapInit+0xb0>)
 8003560:	2200      	movs	r2, #0
 8003562:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4413      	add	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800356c:	2208      	movs	r2, #8
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0307 	bic.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <prvHeapInit+0xb4>)
 8003580:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <prvHeapInit+0xb4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <prvHeapInit+0xb4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	1ad2      	subs	r2, r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <prvHeapInit+0xb4>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <prvHeapInit+0xb8>)
 80035ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4a09      	ldr	r2, [pc, #36]	; (80035dc <prvHeapInit+0xbc>)
 80035b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <prvHeapInit+0xc0>)
 80035ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035be:	601a      	str	r2, [r3, #0]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	20000190 	.word	0x20000190
 80035d0:	20012d90 	.word	0x20012d90
 80035d4:	20012d98 	.word	0x20012d98
 80035d8:	20012da0 	.word	0x20012da0
 80035dc:	20012d9c 	.word	0x20012d9c
 80035e0:	20012dac 	.word	0x20012dac

080035e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <prvInsertBlockIntoFreeList+0xac>)
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e002      	b.n	80035f8 <prvInsertBlockIntoFreeList+0x14>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d8f7      	bhi.n	80035f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	4413      	add	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d108      	bne.n	8003626 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	441a      	add	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	441a      	add	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d118      	bne.n	800366c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <prvInsertBlockIntoFreeList+0xb0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d00d      	beq.n	8003662 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	441a      	add	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e008      	b.n	8003674 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <prvInsertBlockIntoFreeList+0xb0>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e003      	b.n	8003674 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	d002      	beq.n	8003682 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20012d90 	.word	0x20012d90
 8003694:	20012d98 	.word	0x20012d98

08003698 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800369c:	4803      	ldr	r0, [pc, #12]	; (80036ac <_cbSendSystemDesc+0x14>)
 800369e:	f001 fbff 	bl	8004ea0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80036a2:	4803      	ldr	r0, [pc, #12]	; (80036b0 <_cbSendSystemDesc+0x18>)
 80036a4:	f001 fbfc 	bl	8004ea0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80036a8:	bf00      	nop
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	08005594 	.word	0x08005594
 80036b0:	080055d4 	.word	0x080055d4

080036b4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <SEGGER_SYSVIEW_Conf+0x24>)
 80036c2:	4a06      	ldr	r2, [pc, #24]	; (80036dc <SEGGER_SYSVIEW_Conf+0x28>)
 80036c4:	f001 f870 	bl	80047a8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80036c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80036cc:	f001 f8b0 	bl	8004830 <SEGGER_SYSVIEW_SetRAMBase>
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000000 	.word	0x20000000
 80036d8:	08003699 	.word	0x08003699
 80036dc:	08005674 	.word	0x08005674

080036e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80036e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	e033      	b.n	8003754 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80036ec:	491e      	ldr	r1, [pc, #120]	; (8003768 <_cbSendTaskList+0x88>)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	491a      	ldr	r1, [pc, #104]	; (8003768 <_cbSendTaskList+0x88>)
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	3304      	adds	r3, #4
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	4c16      	ldr	r4, [pc, #88]	; (8003768 <_cbSendTaskList+0x88>)
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4423      	add	r3, r4
 800371c:	3308      	adds	r3, #8
 800371e:	681c      	ldr	r4, [r3, #0]
 8003720:	4d11      	ldr	r5, [pc, #68]	; (8003768 <_cbSendTaskList+0x88>)
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	442b      	add	r3, r5
 800372e:	330c      	adds	r3, #12
 8003730:	681d      	ldr	r5, [r3, #0]
 8003732:	4e0d      	ldr	r6, [pc, #52]	; (8003768 <_cbSendTaskList+0x88>)
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4433      	add	r3, r6
 8003740:	3310      	adds	r3, #16
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	462b      	mov	r3, r5
 8003748:	4622      	mov	r2, r4
 800374a:	f000 f8bd 	bl	80038c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3301      	adds	r3, #1
 8003752:	607b      	str	r3, [r7, #4]
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <_cbSendTaskList+0x8c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3c6      	bcc.n	80036ec <_cbSendTaskList+0xc>
  }
}
 800375e:	bf00      	nop
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003768:	20012db0 	.word	0x20012db0
 800376c:	20012e50 	.word	0x20012e50

08003770 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003778:	f7ff f896 	bl	80028a8 <xTaskGetTickCountFromISR>
 800377c:	4603      	mov	r3, r0
 800377e:	2200      	movs	r2, #0
 8003780:	469a      	mov	sl, r3
 8003782:	4693      	mov	fp, r2
 8003784:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	f04f 0a00 	mov.w	sl, #0
 8003794:	f04f 0b00 	mov.w	fp, #0
 8003798:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800379c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80037a0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80037a4:	4652      	mov	r2, sl
 80037a6:	465b      	mov	r3, fp
 80037a8:	1a14      	subs	r4, r2, r0
 80037aa:	eb63 0501 	sbc.w	r5, r3, r1
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	00ab      	lsls	r3, r5, #2
 80037b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80037bc:	00a2      	lsls	r2, r4, #2
 80037be:	4614      	mov	r4, r2
 80037c0:	461d      	mov	r5, r3
 80037c2:	eb14 0800 	adds.w	r8, r4, r0
 80037c6:	eb45 0901 	adc.w	r9, r5, r1
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037de:	4690      	mov	r8, r2
 80037e0:	4699      	mov	r9, r3
 80037e2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80037e6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080037f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003806:	2205      	movs	r2, #5
 8003808:	492b      	ldr	r1, [pc, #172]	; (80038b8 <SYSVIEW_AddTask+0xc0>)
 800380a:	68b8      	ldr	r0, [r7, #8]
 800380c:	f001 fe84 	bl	8005518 <memcmp>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d04b      	beq.n	80038ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <SYSVIEW_AddTask+0xc4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b07      	cmp	r3, #7
 800381c:	d903      	bls.n	8003826 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800381e:	4828      	ldr	r0, [pc, #160]	; (80038c0 <SYSVIEW_AddTask+0xc8>)
 8003820:	f001 fdcc 	bl	80053bc <SEGGER_SYSVIEW_Warn>
    return;
 8003824:	e044      	b.n	80038b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003826:	4b25      	ldr	r3, [pc, #148]	; (80038bc <SYSVIEW_AddTask+0xc4>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4926      	ldr	r1, [pc, #152]	; (80038c4 <SYSVIEW_AddTask+0xcc>)
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <SYSVIEW_AddTask+0xc4>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4921      	ldr	r1, [pc, #132]	; (80038c4 <SYSVIEW_AddTask+0xcc>)
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	3304      	adds	r3, #4
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003850:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <SYSVIEW_AddTask+0xc4>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	491b      	ldr	r1, [pc, #108]	; (80038c4 <SYSVIEW_AddTask+0xcc>)
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3308      	adds	r3, #8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <SYSVIEW_AddTask+0xc4>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4916      	ldr	r1, [pc, #88]	; (80038c4 <SYSVIEW_AddTask+0xcc>)
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	330c      	adds	r3, #12
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <SYSVIEW_AddTask+0xc4>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4910      	ldr	r1, [pc, #64]	; (80038c4 <SYSVIEW_AddTask+0xcc>)
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	3310      	adds	r3, #16
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <SYSVIEW_AddTask+0xc4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	4a08      	ldr	r2, [pc, #32]	; (80038bc <SYSVIEW_AddTask+0xc4>)
 800389a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f80e 	bl	80038c8 <SYSVIEW_SendTaskInfo>
 80038ac:	e000      	b.n	80038b0 <SYSVIEW_AddTask+0xb8>
    return;
 80038ae:	bf00      	nop

}
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	080055e4 	.word	0x080055e4
 80038bc:	20012e50 	.word	0x20012e50
 80038c0:	080055ec 	.word	0x080055ec
 80038c4:	20012db0 	.word	0x20012db0

080038c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80038d6:	f107 0314 	add.w	r3, r7, #20
 80038da:	2214      	movs	r2, #20
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fe38 	bl	8005554 <memset>
  TaskInfo.TaskID     = TaskID;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 f9d7 	bl	8004cb0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003902:	bf00      	nop
 8003904:	3728      	adds	r7, #40	; 0x28
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <__NVIC_EnableIRQ>:
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	2b00      	cmp	r3, #0
 800391c:	db0b      	blt.n	8003936 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	f003 021f 	and.w	r2, r3, #31
 8003924:	4907      	ldr	r1, [pc, #28]	; (8003944 <__NVIC_EnableIRQ+0x38>)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	2001      	movs	r0, #1
 800392e:	fa00 f202 	lsl.w	r2, r0, r2
 8003932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e000e100 	.word	0xe000e100

08003948 <__NVIC_SetPriority>:
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	2b00      	cmp	r3, #0
 800395a:	db0a      	blt.n	8003972 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	490c      	ldr	r1, [pc, #48]	; (8003994 <__NVIC_SetPriority+0x4c>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	0112      	lsls	r2, r2, #4
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	440b      	add	r3, r1
 800396c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003970:	e00a      	b.n	8003988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	4908      	ldr	r1, [pc, #32]	; (8003998 <__NVIC_SetPriority+0x50>)
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	3b04      	subs	r3, #4
 8003980:	0112      	lsls	r2, r2, #4
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	440b      	add	r3, r1
 8003986:	761a      	strb	r2, [r3, #24]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000e100 	.word	0xe000e100
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80039a2:	f001 fd67 	bl	8005474 <SEGGER_SYSVIEW_IsStarted>
 80039a6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80039ae:	f001 f803 	bl	80049b8 <SEGGER_SYSVIEW_Start>
  }
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <_cbOnUARTRx+0x3c>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d806      	bhi.n	80039dc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <_cbOnUARTRx+0x3c>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	3301      	adds	r3, #1
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <_cbOnUARTRx+0x3c>)
 80039d8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80039da:	e009      	b.n	80039f0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80039dc:	f7ff ffde 	bl	800399c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <_cbOnUARTRx+0x3c>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4618      	mov	r0, r3
 80039e6:	1dfb      	adds	r3, r7, #7
 80039e8:	2201      	movs	r2, #1
 80039ea:	4619      	mov	r1, r3
 80039ec:	f000 fb9a 	bl	8004124 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80039f0:	bf00      	nop
}
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000014 	.word	0x20000014

080039fc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <_cbOnUARTTx+0x5c>)
 8003a06:	785b      	ldrb	r3, [r3, #1]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d80f      	bhi.n	8003a2c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003a0c:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <_cbOnUARTTx+0x5c>)
 8003a0e:	785b      	ldrb	r3, [r3, #1]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <_cbOnUARTTx+0x60>)
 8003a14:	5c9a      	ldrb	r2, [r3, r2]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003a1a:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <_cbOnUARTTx+0x5c>)
 8003a1c:	785b      	ldrb	r3, [r3, #1]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <_cbOnUARTTx+0x5c>)
 8003a24:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003a26:	2301      	movs	r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003a2a:	e00f      	b.n	8003a4c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <_cbOnUARTTx+0x5c>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fa19 	bl	8003e6c <SEGGER_RTT_ReadUpBufferNoLock>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	da02      	bge.n	8003a4a <_cbOnUARTTx+0x4e>
    r = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e000      	b.n	8003a4c <_cbOnUARTTx+0x50>
  }
Done:
 8003a4a:	bf00      	nop
  return r;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000014 	.word	0x20000014
 8003a5c:	0800567c 	.word	0x0800567c

08003a60 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <SEGGER_UART_init+0x1c>)
 8003a6a:	4905      	ldr	r1, [pc, #20]	; (8003a80 <SEGGER_UART_init+0x20>)
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f863 	bl	8003b38 <HIF_UART_Init>
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	080039bd 	.word	0x080039bd
 8003a80:	080039fd 	.word	0x080039fd

08003a84 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <USART2_IRQHandler+0x80>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d011      	beq.n	8003abe <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <USART2_IRQHandler+0x84>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 030b 	and.w	r3, r3, #11
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d108      	bne.n	8003abe <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003aac:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <USART2_IRQHandler+0x88>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <USART2_IRQHandler+0x88>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	79fa      	ldrb	r2, [r7, #7]
 8003aba:	4610      	mov	r0, r2
 8003abc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01a      	beq.n	8003afe <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <USART2_IRQHandler+0x8c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d015      	beq.n	8003afc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <USART2_IRQHandler+0x8c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	1dfa      	adds	r2, r7, #7
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4798      	blx	r3
 8003ada:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <USART2_IRQHandler+0x90>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <USART2_IRQHandler+0x90>)
 8003ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e006      	b.n	8003afe <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <USART2_IRQHandler+0x80>)
 8003af2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003af4:	79fa      	ldrb	r2, [r7, #7]
 8003af6:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <USART2_IRQHandler+0x84>)
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e000      	b.n	8003afe <USART2_IRQHandler+0x7a>
      return;
 8003afc:	bf00      	nop
    }
  }
}
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40004400 	.word	0x40004400
 8003b08:	40004404 	.word	0x40004404
 8003b0c:	20012e54 	.word	0x20012e54
 8003b10:	20012e58 	.word	0x20012e58
 8003b14:	4000440c 	.word	0x4000440c

08003b18 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b26:	6013      	str	r3, [r2, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	4000440c 	.word	0x4000440c

08003b38 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003b44:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <HIF_UART_Init+0xc8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2d      	ldr	r2, [pc, #180]	; (8003c00 <HIF_UART_Init+0xc8>)
 8003b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003b50:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <HIF_UART_Init+0xcc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <HIF_UART_Init+0xcc>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003b5c:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <HIF_UART_Init+0xd0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b68:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003b70:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003b72:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <HIF_UART_Init+0xd0>)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003b78:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HIF_UART_Init+0xd4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b84:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003b8c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003b8e:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <HIF_UART_Init+0xd4>)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003b94:	4b1e      	ldr	r3, [pc, #120]	; (8003c10 <HIF_UART_Init+0xd8>)
 8003b96:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003b9a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <HIF_UART_Init+0xdc>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HIF_UART_Init+0xe0>)
 8003ba4:	2280      	movs	r2, #128	; 0x80
 8003ba6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003bae:	4a1b      	ldr	r2, [pc, #108]	; (8003c1c <HIF_UART_Init+0xe4>)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	d302      	bcc.n	8003bce <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003bc8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003bcc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	4a11      	ldr	r2, [pc, #68]	; (8003c20 <HIF_UART_Init+0xe8>)
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003bde:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <HIF_UART_Init+0xec>)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003be4:	4a10      	ldr	r2, [pc, #64]	; (8003c28 <HIF_UART_Init+0xf0>)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003bea:	2106      	movs	r1, #6
 8003bec:	2026      	movs	r0, #38	; 0x26
 8003bee:	f7ff feab 	bl	8003948 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003bf2:	2026      	movs	r0, #38	; 0x26
 8003bf4:	f7ff fe8a 	bl	800390c <__NVIC_EnableIRQ>
}
 8003bf8:	bf00      	nop
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023840 	.word	0x40023840
 8003c04:	40023830 	.word	0x40023830
 8003c08:	40020020 	.word	0x40020020
 8003c0c:	40020000 	.word	0x40020000
 8003c10:	4000440c 	.word	0x4000440c
 8003c14:	40004410 	.word	0x40004410
 8003c18:	40004414 	.word	0x40004414
 8003c1c:	0501bd00 	.word	0x0501bd00
 8003c20:	40004408 	.word	0x40004408
 8003c24:	20012e54 	.word	0x20012e54
 8003c28:	20012e58 	.word	0x20012e58

08003c2c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <_DoInit+0x98>)
 8003c34:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2203      	movs	r2, #3
 8003c40:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a20      	ldr	r2, [pc, #128]	; (8003cc8 <_DoInit+0x9c>)
 8003c46:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a20      	ldr	r2, [pc, #128]	; (8003ccc <_DoInit+0xa0>)
 8003c4c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <_DoInit+0x9c>)
 8003c6c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <_DoInit+0xa4>)
 8003c72:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2210      	movs	r2, #16
 8003c78:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3307      	adds	r3, #7
 8003c90:	4a10      	ldr	r2, [pc, #64]	; (8003cd4 <_DoInit+0xa8>)
 8003c92:	6810      	ldr	r0, [r2, #0]
 8003c94:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c96:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <_DoInit+0xac>)
 8003c9e:	6810      	ldr	r0, [r2, #0]
 8003ca0:	6018      	str	r0, [r3, #0]
 8003ca2:	8891      	ldrh	r1, [r2, #4]
 8003ca4:	7992      	ldrb	r2, [r2, #6]
 8003ca6:	8099      	strh	r1, [r3, #4]
 8003ca8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003caa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003cb4:	f3bf 8f5f 	dmb	sy
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	20012e5c 	.word	0x20012e5c
 8003cc8:	0800563c 	.word	0x0800563c
 8003ccc:	20012f04 	.word	0x20012f04
 8003cd0:	20013304 	.word	0x20013304
 8003cd4:	08005648 	.word	0x08005648
 8003cd8:	0800564c 	.word	0x0800564c

08003cdc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	; 0x28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d905      	bls.n	8003d0c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0a:	e007      	b.n	8003d1c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	69b9      	ldr	r1, [r7, #24]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	1acb      	subs	r3, r1, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	4293      	cmp	r3, r2
 8003d28:	bf28      	it	cs
 8003d2a:	4613      	movcs	r3, r2
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4293      	cmp	r3, r2
 8003d34:	bf28      	it	cs
 8003d36:	4613      	movcs	r3, r2
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	6978      	ldr	r0, [r7, #20]
 8003d4a:	f001 fbf5 	bl	8005538 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003d4e:	6a3a      	ldr	r2, [r7, #32]
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	4413      	add	r3, r2
 8003d54:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	4413      	add	r3, r2
 8003d5c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	4413      	add	r3, r2
 8003d6c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d101      	bne.n	8003d7c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d7c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1b2      	bne.n	8003cf2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3728      	adds	r7, #40	; 0x28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b088      	sub	sp, #32
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d911      	bls.n	8003dde <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	6938      	ldr	r0, [r7, #16]
 8003dca:	f001 fbb5 	bl	8005538 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003dce:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	441a      	add	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003ddc:	e01f      	b.n	8003e1e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4413      	add	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	6938      	ldr	r0, [r7, #16]
 8003df2:	f001 fba1 	bl	8005538 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6938      	ldr	r0, [r7, #16]
 8003e10:	f001 fb92 	bl	8005538 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e14:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	60da      	str	r2, [r3, #12]
}
 8003e1e:	bf00      	nop
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d808      	bhi.n	8003e54 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad2      	subs	r2, r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e004      	b.n	8003e5e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003e5e:	697b      	ldr	r3, [r7, #20]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08c      	sub	sp, #48	; 0x30
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003e78:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e7a:	623b      	str	r3, [r7, #32]
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003e86:	f7ff fed1 	bl	8003c2c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4a37      	ldr	r2, [pc, #220]	; (8003f74 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e98:	4413      	add	r3, r2
 8003e9a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003eac:	2300      	movs	r3, #0
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d92b      	bls.n	8003f10 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	bf28      	it	cs
 8003eca:	4613      	movcs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	4413      	add	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	6939      	ldr	r1, [r7, #16]
 8003edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ede:	f001 fb2b 	bl	8005538 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	4413      	add	r3, r2
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	4413      	add	r3, r2
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d101      	bne.n	8003f10 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	bf28      	it	cs
 8003f20:	4613      	movcs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d019      	beq.n	8003f5e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	4413      	add	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	6939      	ldr	r1, [r7, #16]
 8003f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f3a:	f001 fafd 	bl	8005538 <memcpy>
    NumBytesRead += NumBytesRem;
 8003f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4413      	add	r3, r2
 8003f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f68:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3730      	adds	r7, #48	; 0x30
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20012e5c 	.word	0x20012e5c

08003f78 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	; 0x30
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003f84:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <SEGGER_RTT_ReadNoLock+0x1e>
 8003f92:	f7ff fe4b 	bl	8003c2c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	3360      	adds	r3, #96	; 0x60
 8003fa2:	4a37      	ldr	r2, [pc, #220]	; (8004080 <SEGGER_RTT_ReadNoLock+0x108>)
 8003fa4:	4413      	add	r3, r2
 8003fa6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d92b      	bls.n	800401c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	bf28      	it	cs
 8003fd6:	4613      	movcs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	4413      	add	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	6939      	ldr	r1, [r7, #16]
 8003fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fea:	f001 faa5 	bl	8005538 <memcpy>
    NumBytesRead += NumBytesRem;
 8003fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	4413      	add	r3, r2
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004014:	429a      	cmp	r2, r3
 8004016:	d101      	bne.n	800401c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004018:	2300      	movs	r3, #0
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4293      	cmp	r3, r2
 800402a:	bf28      	it	cs
 800402c:	4613      	movcs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d019      	beq.n	800406a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	4413      	add	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	6939      	ldr	r1, [r7, #16]
 8004044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004046:	f001 fa77 	bl	8005538 <memcpy>
    NumBytesRead += NumBytesRem;
 800404a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	4413      	add	r3, r2
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4413      	add	r3, r2
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	4413      	add	r3, r2
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004074:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004078:	4618      	mov	r0, r3
 800407a:	3730      	adds	r7, #48	; 0x30
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20012e5c 	.word	0x20012e5c

08004084 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	3360      	adds	r3, #96	; 0x60
 80040a0:	4a1f      	ldr	r2, [pc, #124]	; (8004120 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80040a2:	4413      	add	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d029      	beq.n	8004102 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d82e      	bhi.n	8004110 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d013      	beq.n	80040e2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80040ba:	e029      	b.n	8004110 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040bc:	6978      	ldr	r0, [r7, #20]
 80040be:	f7ff feb2 	bl	8003e26 <_GetAvailWriteSpace>
 80040c2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d202      	bcs.n	80040d2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80040d0:	e021      	b.n	8004116 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	69b9      	ldr	r1, [r7, #24]
 80040da:	6978      	ldr	r0, [r7, #20]
 80040dc:	f7ff fe5b 	bl	8003d96 <_WriteNoCheck>
    break;
 80040e0:	e019      	b.n	8004116 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80040e2:	6978      	ldr	r0, [r7, #20]
 80040e4:	f7ff fe9f 	bl	8003e26 <_GetAvailWriteSpace>
 80040e8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4293      	cmp	r3, r2
 80040f0:	bf28      	it	cs
 80040f2:	4613      	movcs	r3, r2
 80040f4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	6978      	ldr	r0, [r7, #20]
 80040fc:	f7ff fe4b 	bl	8003d96 <_WriteNoCheck>
    break;
 8004100:	e009      	b.n	8004116 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	6978      	ldr	r0, [r7, #20]
 8004108:	f7ff fde8 	bl	8003cdc <_WriteBlocking>
 800410c:	61f8      	str	r0, [r7, #28]
    break;
 800410e:	e002      	b.n	8004116 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
    break;
 8004114:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004116:	69fb      	ldr	r3, [r7, #28]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20012e5c 	.word	0x20012e5c

08004124 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800413e:	f7ff fd75 	bl	8003c2c <_DoInit>
  SEGGER_RTT_LOCK();
 8004142:	f3ef 8311 	mrs	r3, BASEPRI
 8004146:	f04f 0120 	mov.w	r1, #32
 800414a:	f381 8811 	msr	BASEPRI, r1
 800414e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7ff ff95 	bl	8004084 <SEGGER_RTT_WriteDownBufferNoLock>
 800415a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004162:	697b      	ldr	r3, [r7, #20]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20012e5c 	.word	0x20012e5c

08004170 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800417e:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <SEGGER_RTT_AllocUpBuffer+0x20>
 800418c:	f7ff fd4e 	bl	8003c2c <_DoInit>
  SEGGER_RTT_LOCK();
 8004190:	f3ef 8311 	mrs	r3, BASEPRI
 8004194:	f04f 0120 	mov.w	r1, #32
 8004198:	f381 8811 	msr	BASEPRI, r1
 800419c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800419e:	4b35      	ldr	r3, [pc, #212]	; (8004274 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80041a0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80041a6:	6939      	ldr	r1, [r7, #16]
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	4613      	mov	r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	440b      	add	r3, r1
 80041b6:	3304      	adds	r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3301      	adds	r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	dbeb      	blt.n	80041a6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80041ce:	e000      	b.n	80041d2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80041d0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	429a      	cmp	r2, r3
 80041da:	da3f      	bge.n	800425c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80041dc:	6939      	ldr	r1, [r7, #16]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	4613      	mov	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4413      	add	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	440b      	add	r3, r1
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80041f0:	6939      	ldr	r1, [r7, #16]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	440b      	add	r3, r1
 8004200:	3304      	adds	r3, #4
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004206:	6939      	ldr	r1, [r7, #16]
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	4613      	mov	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4413      	add	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	440b      	add	r3, r1
 8004214:	3320      	adds	r3, #32
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800421a:	6939      	ldr	r1, [r7, #16]
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	4613      	mov	r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4413      	add	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	440b      	add	r3, r1
 8004228:	3328      	adds	r3, #40	; 0x28
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800422e:	6939      	ldr	r1, [r7, #16]
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	4613      	mov	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4413      	add	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	440b      	add	r3, r1
 800423c:	3324      	adds	r3, #36	; 0x24
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004242:	6939      	ldr	r1, [r7, #16]
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	440b      	add	r3, r1
 8004250:	332c      	adds	r3, #44	; 0x2c
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004256:	f3bf 8f5f 	dmb	sy
 800425a:	e002      	b.n	8004262 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800425c:	f04f 33ff 	mov.w	r3, #4294967295
 8004260:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004268:	69fb      	ldr	r3, [r7, #28]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20012e5c 	.word	0x20012e5c

08004278 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004286:	4b33      	ldr	r3, [pc, #204]	; (8004354 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004294:	f7ff fcca 	bl	8003c2c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004298:	4b2e      	ldr	r3, [pc, #184]	; (8004354 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800429a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	461a      	mov	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d24d      	bcs.n	8004344 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80042a8:	f3ef 8311 	mrs	r3, BASEPRI
 80042ac:	f04f 0120 	mov.w	r1, #32
 80042b0:	f381 8811 	msr	BASEPRI, r1
 80042b4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d031      	beq.n	8004320 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80042bc:	6979      	ldr	r1, [r7, #20]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4613      	mov	r3, r2
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	4413      	add	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	440b      	add	r3, r1
 80042ca:	3360      	adds	r3, #96	; 0x60
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80042d0:	6979      	ldr	r1, [r7, #20]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4613      	mov	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	3364      	adds	r3, #100	; 0x64
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80042e4:	6979      	ldr	r1, [r7, #20]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4613      	mov	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	440b      	add	r3, r1
 80042f2:	3368      	adds	r3, #104	; 0x68
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80042f8:	6979      	ldr	r1, [r7, #20]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4613      	mov	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	4413      	add	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	440b      	add	r3, r1
 8004306:	3370      	adds	r3, #112	; 0x70
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800430c:	6979      	ldr	r1, [r7, #20]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4613      	mov	r3, r2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4413      	add	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	440b      	add	r3, r1
 800431a:	336c      	adds	r3, #108	; 0x6c
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004320:	6979      	ldr	r1, [r7, #20]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4613      	mov	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	3374      	adds	r3, #116	; 0x74
 8004330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004332:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004334:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	e002      	b.n	800434a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004344:	f04f 33ff 	mov.w	r3, #4294967295
 8004348:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800434a:	69fb      	ldr	r3, [r7, #28]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20012e5c 	.word	0x20012e5c

08004358 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004368:	e002      	b.n	8004370 <_EncodeStr+0x18>
    Len++;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3301      	adds	r3, #1
 800436e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4413      	add	r3, r2
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f6      	bne.n	800436a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	429a      	cmp	r2, r3
 8004382:	d901      	bls.n	8004388 <_EncodeStr+0x30>
    Len = Limit;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2bfe      	cmp	r3, #254	; 0xfe
 800438c:	d806      	bhi.n	800439c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	60fa      	str	r2, [r7, #12]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e011      	b.n	80043c0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	60fa      	str	r2, [r7, #12]
 80043a2:	22ff      	movs	r2, #255	; 0xff
 80043a4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	60fa      	str	r2, [r7, #12]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	0a19      	lsrs	r1, r3, #8
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	60fa      	str	r2, [r7, #12]
 80043bc:	b2ca      	uxtb	r2, r1
 80043be:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80043c4:	e00a      	b.n	80043dc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	1c53      	adds	r3, r2, #1
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1c59      	adds	r1, r3, #1
 80043d0:	60f9      	str	r1, [r7, #12]
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	701a      	strb	r2, [r3, #0]
    n++;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	3301      	adds	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d3f0      	bcc.n	80043c6 <_EncodeStr+0x6e>
  }
  return pPayload;
 80043e4:	68fb      	ldr	r3, [r7, #12]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3304      	adds	r3, #4
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <_HandleIncomingPacket+0xe0>)
 8004414:	7e1b      	ldrb	r3, [r3, #24]
 8004416:	4618      	mov	r0, r3
 8004418:	1cfb      	adds	r3, r7, #3
 800441a:	2201      	movs	r2, #1
 800441c:	4619      	mov	r1, r3
 800441e:	f7ff fdab 	bl	8003f78 <SEGGER_RTT_ReadNoLock>
 8004422:	4603      	mov	r3, r0
 8004424:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	dd54      	ble.n	80044d6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	d032      	beq.n	8004498 <_HandleIncomingPacket+0x8c>
 8004432:	2b80      	cmp	r3, #128	; 0x80
 8004434:	dc42      	bgt.n	80044bc <_HandleIncomingPacket+0xb0>
 8004436:	2b07      	cmp	r3, #7
 8004438:	dc16      	bgt.n	8004468 <_HandleIncomingPacket+0x5c>
 800443a:	2b00      	cmp	r3, #0
 800443c:	dd3e      	ble.n	80044bc <_HandleIncomingPacket+0xb0>
 800443e:	3b01      	subs	r3, #1
 8004440:	2b06      	cmp	r3, #6
 8004442:	d83b      	bhi.n	80044bc <_HandleIncomingPacket+0xb0>
 8004444:	a201      	add	r2, pc, #4	; (adr r2, 800444c <_HandleIncomingPacket+0x40>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	0800446f 	.word	0x0800446f
 8004450:	08004475 	.word	0x08004475
 8004454:	0800447b 	.word	0x0800447b
 8004458:	08004481 	.word	0x08004481
 800445c:	08004487 	.word	0x08004487
 8004460:	0800448d 	.word	0x0800448d
 8004464:	08004493 	.word	0x08004493
 8004468:	2b7f      	cmp	r3, #127	; 0x7f
 800446a:	d036      	beq.n	80044da <_HandleIncomingPacket+0xce>
 800446c:	e026      	b.n	80044bc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800446e:	f000 faa3 	bl	80049b8 <SEGGER_SYSVIEW_Start>
      break;
 8004472:	e037      	b.n	80044e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004474:	f000 fb5c 	bl	8004b30 <SEGGER_SYSVIEW_Stop>
      break;
 8004478:	e034      	b.n	80044e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800447a:	f000 fd35 	bl	8004ee8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800447e:	e031      	b.n	80044e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004480:	f000 fcfa 	bl	8004e78 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004484:	e02e      	b.n	80044e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004486:	f000 fb79 	bl	8004b7c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800448a:	e02b      	b.n	80044e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800448c:	f000 ff58 	bl	8005340 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004490:	e028      	b.n	80044e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004492:	f000 ff37 	bl	8005304 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004496:	e025      	b.n	80044e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004498:	4b14      	ldr	r3, [pc, #80]	; (80044ec <_HandleIncomingPacket+0xe0>)
 800449a:	7e1b      	ldrb	r3, [r3, #24]
 800449c:	4618      	mov	r0, r3
 800449e:	1cfb      	adds	r3, r7, #3
 80044a0:	2201      	movs	r2, #1
 80044a2:	4619      	mov	r1, r3
 80044a4:	f7ff fd68 	bl	8003f78 <SEGGER_RTT_ReadNoLock>
 80044a8:	4603      	mov	r3, r0
 80044aa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	dd15      	ble.n	80044de <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fea5 	bl	8005204 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80044ba:	e010      	b.n	80044de <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	b25b      	sxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	da0e      	bge.n	80044e2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <_HandleIncomingPacket+0xe0>)
 80044c6:	7e1b      	ldrb	r3, [r3, #24]
 80044c8:	4618      	mov	r0, r3
 80044ca:	1cfb      	adds	r3, r7, #3
 80044cc:	2201      	movs	r2, #1
 80044ce:	4619      	mov	r1, r3
 80044d0:	f7ff fd52 	bl	8003f78 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80044d4:	e005      	b.n	80044e2 <_HandleIncomingPacket+0xd6>
    }
  }
 80044d6:	bf00      	nop
 80044d8:	e004      	b.n	80044e4 <_HandleIncomingPacket+0xd8>
      break;
 80044da:	bf00      	nop
 80044dc:	e002      	b.n	80044e4 <_HandleIncomingPacket+0xd8>
      break;
 80044de:	bf00      	nop
 80044e0:	e000      	b.n	80044e4 <_HandleIncomingPacket+0xd8>
      break;
 80044e2:	bf00      	nop
}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	2001431c 	.word	0x2001431c

080044f0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08c      	sub	sp, #48	; 0x30
 80044f4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80044f6:	2301      	movs	r3, #1
 80044f8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	3301      	adds	r3, #1
 80044fe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004504:	4b32      	ldr	r3, [pc, #200]	; (80045d0 <_TrySendOverflowPacket+0xe0>)
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
 800450a:	e00b      	b.n	8004524 <_TrySendOverflowPacket+0x34>
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	b2da      	uxtb	r2, r3
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	1c59      	adds	r1, r3, #1
 8004514:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004516:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	09db      	lsrs	r3, r3, #7
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	2b7f      	cmp	r3, #127	; 0x7f
 8004528:	d8f0      	bhi.n	800450c <_TrySendOverflowPacket+0x1c>
 800452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004538:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800453a:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <_TrySendOverflowPacket+0xe4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004540:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <_TrySendOverflowPacket+0xe0>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	e00b      	b.n	800456c <_TrySendOverflowPacket+0x7c>
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	1c59      	adds	r1, r3, #1
 800455c:	6279      	str	r1, [r7, #36]	; 0x24
 800455e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	09db      	lsrs	r3, r3, #7
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	2b7f      	cmp	r3, #127	; 0x7f
 8004570:	d8f0      	bhi.n	8004554 <_TrySendOverflowPacket+0x64>
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	627a      	str	r2, [r7, #36]	; 0x24
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004582:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <_TrySendOverflowPacket+0xe0>)
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	4618      	mov	r0, r3
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	461a      	mov	r2, r3
 8004590:	1d3b      	adds	r3, r7, #4
 8004592:	4619      	mov	r1, r3
 8004594:	f7fb fe3c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004598:	4603      	mov	r3, r0
 800459a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800459c:	f7ff fabc 	bl	8003b18 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80045a6:	4a0a      	ldr	r2, [pc, #40]	; (80045d0 <_TrySendOverflowPacket+0xe0>)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80045ac:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <_TrySendOverflowPacket+0xe0>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <_TrySendOverflowPacket+0xe0>)
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	e004      	b.n	80045c4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <_TrySendOverflowPacket+0xe0>)
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	3301      	adds	r3, #1
 80045c0:	4a03      	ldr	r2, [pc, #12]	; (80045d0 <_TrySendOverflowPacket+0xe0>)
 80045c2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80045c4:	693b      	ldr	r3, [r7, #16]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3730      	adds	r7, #48	; 0x30
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2001431c 	.word	0x2001431c
 80045d4:	e0001004 	.word	0xe0001004

080045d8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	; 0x28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80045e4:	4b6d      	ldr	r3, [pc, #436]	; (800479c <_SendPacket+0x1c4>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d010      	beq.n	800460e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80045ec:	4b6b      	ldr	r3, [pc, #428]	; (800479c <_SendPacket+0x1c4>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80a5 	beq.w	8004740 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80045f6:	4b69      	ldr	r3, [pc, #420]	; (800479c <_SendPacket+0x1c4>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d109      	bne.n	8004612 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80045fe:	f7ff ff77 	bl	80044f0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004602:	4b66      	ldr	r3, [pc, #408]	; (800479c <_SendPacket+0x1c4>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b01      	cmp	r3, #1
 8004608:	f040 809c 	bne.w	8004744 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800460c:	e001      	b.n	8004612 <_SendPacket+0x3a>
    goto Send;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <_SendPacket+0x3c>
Send:
 8004612:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b1f      	cmp	r3, #31
 8004618:	d809      	bhi.n	800462e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800461a:	4b60      	ldr	r3, [pc, #384]	; (800479c <_SendPacket+0x1c4>)
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	f040 808d 	bne.w	8004748 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b17      	cmp	r3, #23
 8004632:	d807      	bhi.n	8004644 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	3b01      	subs	r3, #1
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e03d      	b.n	80046c0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b7f      	cmp	r3, #127	; 0x7f
 8004650:	d912      	bls.n	8004678 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	09da      	lsrs	r2, r3, #7
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3b01      	subs	r3, #1
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	3a01      	subs	r2, #1
 800466a:	60fa      	str	r2, [r7, #12]
 800466c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	e006      	b.n	8004686 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3b01      	subs	r3, #1
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b7f      	cmp	r3, #127	; 0x7f
 800468a:	d912      	bls.n	80046b2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	09da      	lsrs	r2, r3, #7
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3b01      	subs	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	3a01      	subs	r2, #1
 80046a4:	60fa      	str	r2, [r7, #12]
 80046a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	e006      	b.n	80046c0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046c0:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <_SendPacket+0x1c8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80046c6:	4b35      	ldr	r3, [pc, #212]	; (800479c <_SendPacket+0x1c4>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	623b      	str	r3, [r7, #32]
 80046d8:	e00b      	b.n	80046f2 <_SendPacket+0x11a>
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	1c59      	adds	r1, r3, #1
 80046e2:	6279      	str	r1, [r7, #36]	; 0x24
 80046e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	09db      	lsrs	r3, r3, #7
 80046f0:	623b      	str	r3, [r7, #32]
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	2b7f      	cmp	r3, #127	; 0x7f
 80046f6:	d8f0      	bhi.n	80046da <_SendPacket+0x102>
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	627a      	str	r2, [r7, #36]	; 0x24
 80046fe:	6a3a      	ldr	r2, [r7, #32]
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <_SendPacket+0x1c4>)
 800470a:	785b      	ldrb	r3, [r3, #1]
 800470c:	4618      	mov	r0, r3
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	461a      	mov	r2, r3
 8004716:	68f9      	ldr	r1, [r7, #12]
 8004718:	f7fb fd7a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800471c:	4603      	mov	r3, r0
 800471e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004720:	f7ff f9fa 	bl	8003b18 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800472a:	4a1c      	ldr	r2, [pc, #112]	; (800479c <_SendPacket+0x1c4>)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	60d3      	str	r3, [r2, #12]
 8004730:	e00b      	b.n	800474a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004732:	4b1a      	ldr	r3, [pc, #104]	; (800479c <_SendPacket+0x1c4>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	3301      	adds	r3, #1
 8004738:	b2da      	uxtb	r2, r3
 800473a:	4b18      	ldr	r3, [pc, #96]	; (800479c <_SendPacket+0x1c4>)
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	e004      	b.n	800474a <_SendPacket+0x172>
    goto SendDone;
 8004740:	bf00      	nop
 8004742:	e002      	b.n	800474a <_SendPacket+0x172>
      goto SendDone;
 8004744:	bf00      	nop
 8004746:	e000      	b.n	800474a <_SendPacket+0x172>
      goto SendDone;
 8004748:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800474a:	4b14      	ldr	r3, [pc, #80]	; (800479c <_SendPacket+0x1c4>)
 800474c:	7e1b      	ldrb	r3, [r3, #24]
 800474e:	4619      	mov	r1, r3
 8004750:	4a14      	ldr	r2, [pc, #80]	; (80047a4 <_SendPacket+0x1cc>)
 8004752:	460b      	mov	r3, r1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	440b      	add	r3, r1
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4413      	add	r3, r2
 800475c:	336c      	adds	r3, #108	; 0x6c
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4b0e      	ldr	r3, [pc, #56]	; (800479c <_SendPacket+0x1c4>)
 8004762:	7e1b      	ldrb	r3, [r3, #24]
 8004764:	4618      	mov	r0, r3
 8004766:	490f      	ldr	r1, [pc, #60]	; (80047a4 <_SendPacket+0x1cc>)
 8004768:	4603      	mov	r3, r0
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	4403      	add	r3, r0
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	440b      	add	r3, r1
 8004772:	3370      	adds	r3, #112	; 0x70
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d00b      	beq.n	8004792 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800477a:	4b08      	ldr	r3, [pc, #32]	; (800479c <_SendPacket+0x1c4>)
 800477c:	789b      	ldrb	r3, [r3, #2]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004782:	4b06      	ldr	r3, [pc, #24]	; (800479c <_SendPacket+0x1c4>)
 8004784:	2201      	movs	r2, #1
 8004786:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004788:	f7ff fe40 	bl	800440c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800478c:	4b03      	ldr	r3, [pc, #12]	; (800479c <_SendPacket+0x1c4>)
 800478e:	2200      	movs	r2, #0
 8004790:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004792:	bf00      	nop
 8004794:	3728      	adds	r7, #40	; 0x28
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2001431c 	.word	0x2001431c
 80047a0:	e0001004 	.word	0xe0001004
 80047a4:	20012e5c 	.word	0x20012e5c

080047a8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80047b6:	2300      	movs	r3, #0
 80047b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047bc:	4917      	ldr	r1, [pc, #92]	; (800481c <SEGGER_SYSVIEW_Init+0x74>)
 80047be:	4818      	ldr	r0, [pc, #96]	; (8004820 <SEGGER_SYSVIEW_Init+0x78>)
 80047c0:	f7ff fcd6 	bl	8004170 <SEGGER_RTT_AllocUpBuffer>
 80047c4:	4603      	mov	r3, r0
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	4b16      	ldr	r3, [pc, #88]	; (8004824 <SEGGER_SYSVIEW_Init+0x7c>)
 80047ca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80047cc:	4b15      	ldr	r3, [pc, #84]	; (8004824 <SEGGER_SYSVIEW_Init+0x7c>)
 80047ce:	785a      	ldrb	r2, [r3, #1]
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <SEGGER_SYSVIEW_Init+0x7c>)
 80047d2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80047d4:	4b13      	ldr	r3, [pc, #76]	; (8004824 <SEGGER_SYSVIEW_Init+0x7c>)
 80047d6:	7e1b      	ldrb	r3, [r3, #24]
 80047d8:	4618      	mov	r0, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	2308      	movs	r3, #8
 80047e0:	4a11      	ldr	r2, [pc, #68]	; (8004828 <SEGGER_SYSVIEW_Init+0x80>)
 80047e2:	490f      	ldr	r1, [pc, #60]	; (8004820 <SEGGER_SYSVIEW_Init+0x78>)
 80047e4:	f7ff fd48 	bl	8004278 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80047e8:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <SEGGER_SYSVIEW_Init+0x7c>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80047ee:	4b0f      	ldr	r3, [pc, #60]	; (800482c <SEGGER_SYSVIEW_Init+0x84>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <SEGGER_SYSVIEW_Init+0x7c>)
 80047f4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80047f6:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <SEGGER_SYSVIEW_Init+0x7c>)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80047fc:	4a09      	ldr	r2, [pc, #36]	; (8004824 <SEGGER_SYSVIEW_Init+0x7c>)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004802:	4a08      	ldr	r2, [pc, #32]	; (8004824 <SEGGER_SYSVIEW_Init+0x7c>)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004808:	4a06      	ldr	r2, [pc, #24]	; (8004824 <SEGGER_SYSVIEW_Init+0x7c>)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <SEGGER_SYSVIEW_Init+0x7c>)
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	20013314 	.word	0x20013314
 8004820:	08005654 	.word	0x08005654
 8004824:	2001431c 	.word	0x2001431c
 8004828:	20014314 	.word	0x20014314
 800482c:	e0001004 	.word	0xe0001004

08004830 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004838:	4a04      	ldr	r2, [pc, #16]	; (800484c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6113      	str	r3, [r2, #16]
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	2001431c 	.word	0x2001431c

08004850 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004858:	f3ef 8311 	mrs	r3, BASEPRI
 800485c:	f04f 0120 	mov.w	r1, #32
 8004860:	f381 8811 	msr	BASEPRI, r1
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	4808      	ldr	r0, [pc, #32]	; (8004888 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004868:	f7ff fdc3 	bl	80043f2 <_PreparePacket>
 800486c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	68b8      	ldr	r0, [r7, #8]
 8004874:	f7ff feb0 	bl	80045d8 <_SendPacket>
  RECORD_END();
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f383 8811 	msr	BASEPRI, r3
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	2001434c 	.word	0x2001434c

0800488c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004896:	f3ef 8311 	mrs	r3, BASEPRI
 800489a:	f04f 0120 	mov.w	r1, #32
 800489e:	f381 8811 	msr	BASEPRI, r1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	4816      	ldr	r0, [pc, #88]	; (8004900 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80048a6:	f7ff fda4 	bl	80043f2 <_PreparePacket>
 80048aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	e00b      	b.n	80048d2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	1c59      	adds	r1, r3, #1
 80048c2:	61f9      	str	r1, [r7, #28]
 80048c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	09db      	lsrs	r3, r3, #7
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b7f      	cmp	r3, #127	; 0x7f
 80048d6:	d8f0      	bhi.n	80048ba <SEGGER_SYSVIEW_RecordU32+0x2e>
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	61fa      	str	r2, [r7, #28]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	6938      	ldr	r0, [r7, #16]
 80048ee:	f7ff fe73 	bl	80045d8 <_SendPacket>
  RECORD_END();
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f383 8811 	msr	BASEPRI, r3
}
 80048f8:	bf00      	nop
 80048fa:	3720      	adds	r7, #32
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	2001434c 	.word	0x2001434c

08004904 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004904:	b580      	push	{r7, lr}
 8004906:	b08c      	sub	sp, #48	; 0x30
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004910:	f3ef 8311 	mrs	r3, BASEPRI
 8004914:	f04f 0120 	mov.w	r1, #32
 8004918:	f381 8811 	msr	BASEPRI, r1
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	4825      	ldr	r0, [pc, #148]	; (80049b4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004920:	f7ff fd67 	bl	80043f2 <_PreparePacket>
 8004924:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
 8004932:	e00b      	b.n	800494c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	b2da      	uxtb	r2, r3
 8004938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493a:	1c59      	adds	r1, r3, #1
 800493c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800493e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	09db      	lsrs	r3, r3, #7
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	2b7f      	cmp	r3, #127	; 0x7f
 8004950:	d8f0      	bhi.n	8004934 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	623b      	str	r3, [r7, #32]
 800496a:	e00b      	b.n	8004984 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	1c59      	adds	r1, r3, #1
 8004974:	6279      	str	r1, [r7, #36]	; 0x24
 8004976:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	09db      	lsrs	r3, r3, #7
 8004982:	623b      	str	r3, [r7, #32]
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	2b7f      	cmp	r3, #127	; 0x7f
 8004988:	d8f0      	bhi.n	800496c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	627a      	str	r2, [r7, #36]	; 0x24
 8004990:	6a3a      	ldr	r2, [r7, #32]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	6979      	ldr	r1, [r7, #20]
 800499e:	69b8      	ldr	r0, [r7, #24]
 80049a0:	f7ff fe1a 	bl	80045d8 <_SendPacket>
  RECORD_END();
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f383 8811 	msr	BASEPRI, r3
}
 80049aa:	bf00      	nop
 80049ac:	3730      	adds	r7, #48	; 0x30
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	2001434c 	.word	0x2001434c

080049b8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08c      	sub	sp, #48	; 0x30
 80049bc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80049be:	4b59      	ldr	r3, [pc, #356]	; (8004b24 <SEGGER_SYSVIEW_Start+0x16c>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80049c4:	f3ef 8311 	mrs	r3, BASEPRI
 80049c8:	f04f 0120 	mov.w	r1, #32
 80049cc:	f381 8811 	msr	BASEPRI, r1
 80049d0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80049d2:	4b54      	ldr	r3, [pc, #336]	; (8004b24 <SEGGER_SYSVIEW_Start+0x16c>)
 80049d4:	785b      	ldrb	r3, [r3, #1]
 80049d6:	220a      	movs	r2, #10
 80049d8:	4953      	ldr	r1, [pc, #332]	; (8004b28 <SEGGER_SYSVIEW_Start+0x170>)
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fb fc18 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80049e6:	f7ff f897 	bl	8003b18 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80049ea:	200a      	movs	r0, #10
 80049ec:	f7ff ff30 	bl	8004850 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80049f0:	f3ef 8311 	mrs	r3, BASEPRI
 80049f4:	f04f 0120 	mov.w	r1, #32
 80049f8:	f381 8811 	msr	BASEPRI, r1
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	484b      	ldr	r0, [pc, #300]	; (8004b2c <SEGGER_SYSVIEW_Start+0x174>)
 8004a00:	f7ff fcf7 	bl	80043f2 <_PreparePacket>
 8004a04:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a0e:	4b45      	ldr	r3, [pc, #276]	; (8004b24 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a14:	e00b      	b.n	8004a2e <SEGGER_SYSVIEW_Start+0x76>
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	1c59      	adds	r1, r3, #1
 8004a1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	09db      	lsrs	r3, r3, #7
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	2b7f      	cmp	r3, #127	; 0x7f
 8004a32:	d8f0      	bhi.n	8004a16 <SEGGER_SYSVIEW_Start+0x5e>
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
 8004a48:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	623b      	str	r3, [r7, #32]
 8004a4e:	e00b      	b.n	8004a68 <SEGGER_SYSVIEW_Start+0xb0>
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	1c59      	adds	r1, r3, #1
 8004a58:	6279      	str	r1, [r7, #36]	; 0x24
 8004a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	09db      	lsrs	r3, r3, #7
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a6c:	d8f0      	bhi.n	8004a50 <SEGGER_SYSVIEW_Start+0x98>
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	627a      	str	r2, [r7, #36]	; 0x24
 8004a74:	6a3a      	ldr	r2, [r7, #32]
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	4b28      	ldr	r3, [pc, #160]	; (8004b24 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	e00b      	b.n	8004aa2 <SEGGER_SYSVIEW_Start+0xea>
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	1c59      	adds	r1, r3, #1
 8004a92:	61f9      	str	r1, [r7, #28]
 8004a94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	09db      	lsrs	r3, r3, #7
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8004aa6:	d8f0      	bhi.n	8004a8a <SEGGER_SYSVIEW_Start+0xd2>
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	61fa      	str	r2, [r7, #28]
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	e00b      	b.n	8004ada <SEGGER_SYSVIEW_Start+0x122>
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	1c59      	adds	r1, r3, #1
 8004aca:	6179      	str	r1, [r7, #20]
 8004acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	09db      	lsrs	r3, r3, #7
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ade:	d8f0      	bhi.n	8004ac2 <SEGGER_SYSVIEW_Start+0x10a>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	617a      	str	r2, [r7, #20]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004af0:	2218      	movs	r2, #24
 8004af2:	6839      	ldr	r1, [r7, #0]
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff fd6f 	bl	80045d8 <_SendPacket>
      RECORD_END();
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <SEGGER_SYSVIEW_Start+0x16c>)
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <SEGGER_SYSVIEW_Start+0x16c>)
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004b0e:	f000 f9eb 	bl	8004ee8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004b12:	f000 f9b1 	bl	8004e78 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004b16:	f000 fc13 	bl	8005340 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004b1a:	bf00      	nop
 8004b1c:	3730      	adds	r7, #48	; 0x30
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	2001431c 	.word	0x2001431c
 8004b28:	08005680 	.word	0x08005680
 8004b2c:	2001434c 	.word	0x2001434c

08004b30 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b36:	f3ef 8311 	mrs	r3, BASEPRI
 8004b3a:	f04f 0120 	mov.w	r1, #32
 8004b3e:	f381 8811 	msr	BASEPRI, r1
 8004b42:	607b      	str	r3, [r7, #4]
 8004b44:	480b      	ldr	r0, [pc, #44]	; (8004b74 <SEGGER_SYSVIEW_Stop+0x44>)
 8004b46:	f7ff fc54 	bl	80043f2 <_PreparePacket>
 8004b4a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <SEGGER_SYSVIEW_Stop+0x48>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004b54:	220b      	movs	r2, #11
 8004b56:	6839      	ldr	r1, [r7, #0]
 8004b58:	6838      	ldr	r0, [r7, #0]
 8004b5a:	f7ff fd3d 	bl	80045d8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004b5e:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <SEGGER_SYSVIEW_Stop+0x48>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f383 8811 	msr	BASEPRI, r3
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	2001434c 	.word	0x2001434c
 8004b78:	2001431c 	.word	0x2001431c

08004b7c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08c      	sub	sp, #48	; 0x30
 8004b80:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b82:	f3ef 8311 	mrs	r3, BASEPRI
 8004b86:	f04f 0120 	mov.w	r1, #32
 8004b8a:	f381 8811 	msr	BASEPRI, r1
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	4845      	ldr	r0, [pc, #276]	; (8004ca8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004b92:	f7ff fc2e 	bl	80043f2 <_PreparePacket>
 8004b96:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba0:	4b42      	ldr	r3, [pc, #264]	; (8004cac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba6:	e00b      	b.n	8004bc0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	1c59      	adds	r1, r3, #1
 8004bb0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	09db      	lsrs	r3, r3, #7
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8004bc4:	d8f0      	bhi.n	8004ba8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bda:	4b34      	ldr	r3, [pc, #208]	; (8004cac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	623b      	str	r3, [r7, #32]
 8004be0:	e00b      	b.n	8004bfa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	1c59      	adds	r1, r3, #1
 8004bea:	6279      	str	r1, [r7, #36]	; 0x24
 8004bec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	09db      	lsrs	r3, r3, #7
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8004bfe:	d8f0      	bhi.n	8004be2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	627a      	str	r2, [r7, #36]	; 0x24
 8004c06:	6a3a      	ldr	r2, [r7, #32]
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	e00b      	b.n	8004c34 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	1c59      	adds	r1, r3, #1
 8004c24:	61f9      	str	r1, [r7, #28]
 8004c26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	09db      	lsrs	r3, r3, #7
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b7f      	cmp	r3, #127	; 0x7f
 8004c38:	d8f0      	bhi.n	8004c1c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	61fa      	str	r2, [r7, #28]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	e00b      	b.n	8004c6c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	1c59      	adds	r1, r3, #1
 8004c5c:	6179      	str	r1, [r7, #20]
 8004c5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	09db      	lsrs	r3, r3, #7
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c70:	d8f0      	bhi.n	8004c54 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	617a      	str	r2, [r7, #20]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004c82:	2218      	movs	r2, #24
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	68b8      	ldr	r0, [r7, #8]
 8004c88:	f7ff fca6 	bl	80045d8 <_SendPacket>
  RECORD_END();
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004c9a:	4b04      	ldr	r3, [pc, #16]	; (8004cac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	4798      	blx	r3
  }
}
 8004ca0:	bf00      	nop
 8004ca2:	3730      	adds	r7, #48	; 0x30
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	2001434c 	.word	0x2001434c
 8004cac:	2001431c 	.word	0x2001431c

08004cb0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b092      	sub	sp, #72	; 0x48
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8004cbc:	f04f 0120 	mov.w	r1, #32
 8004cc0:	f381 8811 	msr	BASEPRI, r1
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	486a      	ldr	r0, [pc, #424]	; (8004e70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004cc8:	f7ff fb93 	bl	80043f2 <_PreparePacket>
 8004ccc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b66      	ldr	r3, [pc, #408]	; (8004e74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ce2:	e00b      	b.n	8004cfc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cea:	1c59      	adds	r1, r3, #1
 8004cec:	6479      	str	r1, [r7, #68]	; 0x44
 8004cee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf8:	09db      	lsrs	r3, r3, #7
 8004cfa:	643b      	str	r3, [r7, #64]	; 0x40
 8004cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8004d00:	d8f0      	bhi.n	8004ce4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	647a      	str	r2, [r7, #68]	; 0x44
 8004d08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d1c:	e00b      	b.n	8004d36 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d24:	1c59      	adds	r1, r3, #1
 8004d26:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004d28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	09db      	lsrs	r3, r3, #7
 8004d34:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	2b7f      	cmp	r3, #127	; 0x7f
 8004d3a:	d8f0      	bhi.n	8004d1e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	4619      	mov	r1, r3
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff faff 	bl	8004358 <_EncodeStr>
 8004d5a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004d5c:	2209      	movs	r2, #9
 8004d5e:	68f9      	ldr	r1, [r7, #12]
 8004d60:	6938      	ldr	r0, [r7, #16]
 8004d62:	f7ff fc39 	bl	80045d8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4b40      	ldr	r3, [pc, #256]	; (8004e74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	633b      	str	r3, [r7, #48]	; 0x30
 8004d7a:	e00b      	b.n	8004d94 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d82:	1c59      	adds	r1, r3, #1
 8004d84:	6379      	str	r1, [r7, #52]	; 0x34
 8004d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	09db      	lsrs	r3, r3, #7
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	2b7f      	cmp	r3, #127	; 0x7f
 8004d98:	d8f0      	bhi.n	8004d7c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	637a      	str	r2, [r7, #52]	; 0x34
 8004da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db4:	e00b      	b.n	8004dce <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	1c59      	adds	r1, r3, #1
 8004dbe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004dc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	09db      	lsrs	r3, r3, #7
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd2:	d8f0      	bhi.n	8004db6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	623b      	str	r3, [r7, #32]
 8004dee:	e00b      	b.n	8004e08 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	1c59      	adds	r1, r3, #1
 8004df8:	6279      	str	r1, [r7, #36]	; 0x24
 8004dfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	09db      	lsrs	r3, r3, #7
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0c:	d8f0      	bhi.n	8004df0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	627a      	str	r2, [r7, #36]	; 0x24
 8004e14:	6a3a      	ldr	r2, [r7, #32]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	2300      	movs	r3, #0
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	e00b      	b.n	8004e40 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	61f9      	str	r1, [r7, #28]
 8004e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	09db      	lsrs	r3, r3, #7
 8004e3e:	61bb      	str	r3, [r7, #24]
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2b7f      	cmp	r3, #127	; 0x7f
 8004e44:	d8f0      	bhi.n	8004e28 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	61fa      	str	r2, [r7, #28]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004e56:	2215      	movs	r2, #21
 8004e58:	68f9      	ldr	r1, [r7, #12]
 8004e5a:	6938      	ldr	r0, [r7, #16]
 8004e5c:	f7ff fbbc 	bl	80045d8 <_SendPacket>
  RECORD_END();
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f383 8811 	msr	BASEPRI, r3
}
 8004e66:	bf00      	nop
 8004e68:	3748      	adds	r7, #72	; 0x48
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	2001434c 	.word	0x2001434c
 8004e74:	2001431c 	.word	0x2001431c

08004e78 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004e7c:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004e8e:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4798      	blx	r3
  }
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	2001431c 	.word	0x2001431c

08004ea0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ea8:	f3ef 8311 	mrs	r3, BASEPRI
 8004eac:	f04f 0120 	mov.w	r1, #32
 8004eb0:	f381 8811 	msr	BASEPRI, r1
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	480b      	ldr	r0, [pc, #44]	; (8004ee4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004eb8:	f7ff fa9b 	bl	80043f2 <_PreparePacket>
 8004ebc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ebe:	2280      	movs	r2, #128	; 0x80
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	6938      	ldr	r0, [r7, #16]
 8004ec4:	f7ff fa48 	bl	8004358 <_EncodeStr>
 8004ec8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004eca:	220e      	movs	r2, #14
 8004ecc:	68f9      	ldr	r1, [r7, #12]
 8004ece:	6938      	ldr	r0, [r7, #16]
 8004ed0:	f7ff fb82 	bl	80045d8 <_SendPacket>
  RECORD_END();
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f383 8811 	msr	BASEPRI, r3
}
 8004eda:	bf00      	nop
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	2001434c 	.word	0x2001434c

08004ee8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004eee:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01a      	beq.n	8004f2c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d015      	beq.n	8004f2c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004f00:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4798      	blx	r3
 8004f08:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f0c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	000a      	movs	r2, r1
 8004f1c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f1e:	4613      	mov	r3, r2
 8004f20:	461a      	mov	r2, r3
 8004f22:	4621      	mov	r1, r4
 8004f24:	200d      	movs	r0, #13
 8004f26:	f7ff fced 	bl	8004904 <SEGGER_SYSVIEW_RecordU32x2>
 8004f2a:	e006      	b.n	8004f3a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4619      	mov	r1, r3
 8004f32:	200c      	movs	r0, #12
 8004f34:	f7ff fcaa 	bl	800488c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd90      	pop	{r4, r7, pc}
 8004f42:	bf00      	nop
 8004f44:	2001431c 	.word	0x2001431c
 8004f48:	e0001004 	.word	0xe0001004

08004f4c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f52:	f3ef 8311 	mrs	r3, BASEPRI
 8004f56:	f04f 0120 	mov.w	r1, #32
 8004f5a:	f381 8811 	msr	BASEPRI, r1
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	4819      	ldr	r0, [pc, #100]	; (8004fc8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004f62:	f7ff fa46 	bl	80043f2 <_PreparePacket>
 8004f66:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004f6c:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f74:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	e00b      	b.n	8004f98 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1c59      	adds	r1, r3, #1
 8004f88:	6179      	str	r1, [r7, #20]
 8004f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	09db      	lsrs	r3, r3, #7
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f9c:	d8f0      	bhi.n	8004f80 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	617a      	str	r2, [r7, #20]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004fae:	2202      	movs	r2, #2
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	68b8      	ldr	r0, [r7, #8]
 8004fb4:	f7ff fb10 	bl	80045d8 <_SendPacket>
  RECORD_END();
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f383 8811 	msr	BASEPRI, r3
}
 8004fbe:	bf00      	nop
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	2001434c 	.word	0x2001434c
 8004fcc:	e000ed04 	.word	0xe000ed04

08004fd0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fda:	f04f 0120 	mov.w	r1, #32
 8004fde:	f381 8811 	msr	BASEPRI, r1
 8004fe2:	607b      	str	r3, [r7, #4]
 8004fe4:	4807      	ldr	r0, [pc, #28]	; (8005004 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004fe6:	f7ff fa04 	bl	80043f2 <_PreparePacket>
 8004fea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004fec:	2203      	movs	r2, #3
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	6838      	ldr	r0, [r7, #0]
 8004ff2:	f7ff faf1 	bl	80045d8 <_SendPacket>
  RECORD_END();
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f383 8811 	msr	BASEPRI, r3
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	2001434c 	.word	0x2001434c

08005008 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800500e:	f3ef 8311 	mrs	r3, BASEPRI
 8005012:	f04f 0120 	mov.w	r1, #32
 8005016:	f381 8811 	msr	BASEPRI, r1
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	4807      	ldr	r0, [pc, #28]	; (800503c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800501e:	f7ff f9e8 	bl	80043f2 <_PreparePacket>
 8005022:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005024:	2212      	movs	r2, #18
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	6838      	ldr	r0, [r7, #0]
 800502a:	f7ff fad5 	bl	80045d8 <_SendPacket>
  RECORD_END();
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f383 8811 	msr	BASEPRI, r3
}
 8005034:	bf00      	nop
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	2001434c 	.word	0x2001434c

08005040 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005046:	f3ef 8311 	mrs	r3, BASEPRI
 800504a:	f04f 0120 	mov.w	r1, #32
 800504e:	f381 8811 	msr	BASEPRI, r1
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	4807      	ldr	r0, [pc, #28]	; (8005074 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005056:	f7ff f9cc 	bl	80043f2 <_PreparePacket>
 800505a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800505c:	2211      	movs	r2, #17
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	6838      	ldr	r0, [r7, #0]
 8005062:	f7ff fab9 	bl	80045d8 <_SendPacket>
  RECORD_END();
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f383 8811 	msr	BASEPRI, r3
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	2001434c 	.word	0x2001434c

08005078 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005080:	f3ef 8311 	mrs	r3, BASEPRI
 8005084:	f04f 0120 	mov.w	r1, #32
 8005088:	f381 8811 	msr	BASEPRI, r1
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	4819      	ldr	r0, [pc, #100]	; (80050f4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005090:	f7ff f9af 	bl	80043f2 <_PreparePacket>
 8005094:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800509a:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	e00b      	b.n	80050c6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1c59      	adds	r1, r3, #1
 80050b6:	61f9      	str	r1, [r7, #28]
 80050b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	09db      	lsrs	r3, r3, #7
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b7f      	cmp	r3, #127	; 0x7f
 80050ca:	d8f0      	bhi.n	80050ae <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	61fa      	str	r2, [r7, #28]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80050dc:	2208      	movs	r2, #8
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	6938      	ldr	r0, [r7, #16]
 80050e2:	f7ff fa79 	bl	80045d8 <_SendPacket>
  RECORD_END();
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f383 8811 	msr	BASEPRI, r3
}
 80050ec:	bf00      	nop
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	2001434c 	.word	0x2001434c
 80050f8:	2001431c 	.word	0x2001431c

080050fc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005104:	f3ef 8311 	mrs	r3, BASEPRI
 8005108:	f04f 0120 	mov.w	r1, #32
 800510c:	f381 8811 	msr	BASEPRI, r1
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	4819      	ldr	r0, [pc, #100]	; (8005178 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005114:	f7ff f96d 	bl	80043f2 <_PreparePacket>
 8005118:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800511e:	4b17      	ldr	r3, [pc, #92]	; (800517c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	e00b      	b.n	800514a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	b2da      	uxtb	r2, r3
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	1c59      	adds	r1, r3, #1
 800513a:	61f9      	str	r1, [r7, #28]
 800513c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	09db      	lsrs	r3, r3, #7
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b7f      	cmp	r3, #127	; 0x7f
 800514e:	d8f0      	bhi.n	8005132 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	61fa      	str	r2, [r7, #28]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005160:	2204      	movs	r2, #4
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	6938      	ldr	r0, [r7, #16]
 8005166:	f7ff fa37 	bl	80045d8 <_SendPacket>
  RECORD_END();
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f383 8811 	msr	BASEPRI, r3
}
 8005170:	bf00      	nop
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	2001434c 	.word	0x2001434c
 800517c:	2001431c 	.word	0x2001431c

08005180 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005188:	f3ef 8311 	mrs	r3, BASEPRI
 800518c:	f04f 0120 	mov.w	r1, #32
 8005190:	f381 8811 	msr	BASEPRI, r1
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	4819      	ldr	r0, [pc, #100]	; (80051fc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005198:	f7ff f92b 	bl	80043f2 <_PreparePacket>
 800519c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80051a2:	4b17      	ldr	r3, [pc, #92]	; (8005200 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	e00b      	b.n	80051ce <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	1c59      	adds	r1, r3, #1
 80051be:	61f9      	str	r1, [r7, #28]
 80051c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	09db      	lsrs	r3, r3, #7
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2b7f      	cmp	r3, #127	; 0x7f
 80051d2:	d8f0      	bhi.n	80051b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	61fa      	str	r2, [r7, #28]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80051e4:	2206      	movs	r2, #6
 80051e6:	68f9      	ldr	r1, [r7, #12]
 80051e8:	6938      	ldr	r0, [r7, #16]
 80051ea:	f7ff f9f5 	bl	80045d8 <_SendPacket>
  RECORD_END();
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f383 8811 	msr	BASEPRI, r3
}
 80051f4:	bf00      	nop
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	2001434c 	.word	0x2001434c
 8005200:	2001431c 	.word	0x2001431c

08005204 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b08c      	sub	sp, #48	; 0x30
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800520e:	4b3b      	ldr	r3, [pc, #236]	; (80052fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d06d      	beq.n	80052f2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005216:	4b39      	ldr	r3, [pc, #228]	; (80052fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800521c:	2300      	movs	r3, #0
 800521e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005220:	e008      	b.n	8005234 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	3301      	adds	r3, #1
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005238:	429a      	cmp	r2, r3
 800523a:	d3f2      	bcc.n	8005222 <SEGGER_SYSVIEW_SendModule+0x1e>
 800523c:	e000      	b.n	8005240 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800523e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d055      	beq.n	80052f2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005246:	f3ef 8311 	mrs	r3, BASEPRI
 800524a:	f04f 0120 	mov.w	r1, #32
 800524e:	f381 8811 	msr	BASEPRI, r1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	482a      	ldr	r0, [pc, #168]	; (8005300 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005256:	f7ff f8cc 	bl	80043f2 <_PreparePacket>
 800525a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	623b      	str	r3, [r7, #32]
 8005268:	e00b      	b.n	8005282 <SEGGER_SYSVIEW_SendModule+0x7e>
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	b2da      	uxtb	r2, r3
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	1c59      	adds	r1, r3, #1
 8005272:	6279      	str	r1, [r7, #36]	; 0x24
 8005274:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	09db      	lsrs	r3, r3, #7
 8005280:	623b      	str	r3, [r7, #32]
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	2b7f      	cmp	r3, #127	; 0x7f
 8005286:	d8f0      	bhi.n	800526a <SEGGER_SYSVIEW_SendModule+0x66>
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	627a      	str	r2, [r7, #36]	; 0x24
 800528e:	6a3a      	ldr	r2, [r7, #32]
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	e00b      	b.n	80052bc <SEGGER_SYSVIEW_SendModule+0xb8>
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	1c59      	adds	r1, r3, #1
 80052ac:	61f9      	str	r1, [r7, #28]
 80052ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	09db      	lsrs	r3, r3, #7
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b7f      	cmp	r3, #127	; 0x7f
 80052c0:	d8f0      	bhi.n	80052a4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	61fa      	str	r2, [r7, #28]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2280      	movs	r2, #128	; 0x80
 80052d8:	4619      	mov	r1, r3
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f7ff f83c 	bl	8004358 <_EncodeStr>
 80052e0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80052e2:	2216      	movs	r2, #22
 80052e4:	68f9      	ldr	r1, [r7, #12]
 80052e6:	6938      	ldr	r0, [r7, #16]
 80052e8:	f7ff f976 	bl	80045d8 <_SendPacket>
      RECORD_END();
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80052f2:	bf00      	nop
 80052f4:	3730      	adds	r7, #48	; 0x30
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20014344 	.word	0x20014344
 8005300:	2001434c 	.word	0x2001434c

08005304 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800530a:	4b0c      	ldr	r3, [pc, #48]	; (800533c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00f      	beq.n	8005332 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f2      	bne.n	8005318 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20014344 	.word	0x20014344

08005340 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005346:	f3ef 8311 	mrs	r3, BASEPRI
 800534a:	f04f 0120 	mov.w	r1, #32
 800534e:	f381 8811 	msr	BASEPRI, r1
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	4817      	ldr	r0, [pc, #92]	; (80053b4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005356:	f7ff f84c 	bl	80043f2 <_PreparePacket>
 800535a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	e00b      	b.n	8005384 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	b2da      	uxtb	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	1c59      	adds	r1, r3, #1
 8005374:	6179      	str	r1, [r7, #20]
 8005376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	09db      	lsrs	r3, r3, #7
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2b7f      	cmp	r3, #127	; 0x7f
 8005388:	d8f0      	bhi.n	800536c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	617a      	str	r2, [r7, #20]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800539a:	221b      	movs	r2, #27
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	68b8      	ldr	r0, [r7, #8]
 80053a0:	f7ff f91a 	bl	80045d8 <_SendPacket>
  RECORD_END();
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f383 8811 	msr	BASEPRI, r3
}
 80053aa:	bf00      	nop
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	2001434c 	.word	0x2001434c
 80053b8:	20014348 	.word	0x20014348

080053bc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08a      	sub	sp, #40	; 0x28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053c4:	f3ef 8311 	mrs	r3, BASEPRI
 80053c8:	f04f 0120 	mov.w	r1, #32
 80053cc:	f381 8811 	msr	BASEPRI, r1
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	4827      	ldr	r0, [pc, #156]	; (8005470 <SEGGER_SYSVIEW_Warn+0xb4>)
 80053d4:	f7ff f80d 	bl	80043f2 <_PreparePacket>
 80053d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	6938      	ldr	r0, [r7, #16]
 80053e0:	f7fe ffba 	bl	8004358 <_EncodeStr>
 80053e4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ea:	2301      	movs	r3, #1
 80053ec:	623b      	str	r3, [r7, #32]
 80053ee:	e00b      	b.n	8005408 <SEGGER_SYSVIEW_Warn+0x4c>
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	6279      	str	r1, [r7, #36]	; 0x24
 80053fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	09db      	lsrs	r3, r3, #7
 8005406:	623b      	str	r3, [r7, #32]
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2b7f      	cmp	r3, #127	; 0x7f
 800540c:	d8f0      	bhi.n	80053f0 <SEGGER_SYSVIEW_Warn+0x34>
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	627a      	str	r2, [r7, #36]	; 0x24
 8005414:	6a3a      	ldr	r2, [r7, #32]
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	e00b      	b.n	8005440 <SEGGER_SYSVIEW_Warn+0x84>
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	1c59      	adds	r1, r3, #1
 8005430:	61f9      	str	r1, [r7, #28]
 8005432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	09db      	lsrs	r3, r3, #7
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b7f      	cmp	r3, #127	; 0x7f
 8005444:	d8f0      	bhi.n	8005428 <SEGGER_SYSVIEW_Warn+0x6c>
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	61fa      	str	r2, [r7, #28]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005456:	221a      	movs	r2, #26
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	6938      	ldr	r0, [r7, #16]
 800545c:	f7ff f8bc 	bl	80045d8 <_SendPacket>
  RECORD_END();
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f383 8811 	msr	BASEPRI, r3
}
 8005466:	bf00      	nop
 8005468:	3728      	adds	r7, #40	; 0x28
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	2001434c 	.word	0x2001434c

08005474 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005478:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800547a:	7e1b      	ldrb	r3, [r3, #24]
 800547c:	4619      	mov	r1, r3
 800547e:	4a13      	ldr	r2, [pc, #76]	; (80054cc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005480:	460b      	mov	r3, r1
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	440b      	add	r3, r1
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4413      	add	r3, r2
 800548a:	336c      	adds	r3, #108	; 0x6c
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005490:	7e1b      	ldrb	r3, [r3, #24]
 8005492:	4618      	mov	r0, r3
 8005494:	490d      	ldr	r1, [pc, #52]	; (80054cc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005496:	4603      	mov	r3, r0
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	4403      	add	r3, r0
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	440b      	add	r3, r1
 80054a0:	3370      	adds	r3, #112	; 0x70
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d00b      	beq.n	80054c0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80054a8:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054aa:	789b      	ldrb	r3, [r3, #2]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d107      	bne.n	80054c0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80054b6:	f7fe ffa9 	bl	800440c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80054ba:	4b03      	ldr	r3, [pc, #12]	; (80054c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054bc:	2200      	movs	r2, #0
 80054be:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80054c0:	4b01      	ldr	r3, [pc, #4]	; (80054c8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	2001431c 	.word	0x2001431c
 80054cc:	20012e5c 	.word	0x20012e5c

080054d0 <__libc_init_array>:
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	4d0d      	ldr	r5, [pc, #52]	; (8005508 <__libc_init_array+0x38>)
 80054d4:	4c0d      	ldr	r4, [pc, #52]	; (800550c <__libc_init_array+0x3c>)
 80054d6:	1b64      	subs	r4, r4, r5
 80054d8:	10a4      	asrs	r4, r4, #2
 80054da:	2600      	movs	r6, #0
 80054dc:	42a6      	cmp	r6, r4
 80054de:	d109      	bne.n	80054f4 <__libc_init_array+0x24>
 80054e0:	4d0b      	ldr	r5, [pc, #44]	; (8005510 <__libc_init_array+0x40>)
 80054e2:	4c0c      	ldr	r4, [pc, #48]	; (8005514 <__libc_init_array+0x44>)
 80054e4:	f000 f83e 	bl	8005564 <_init>
 80054e8:	1b64      	subs	r4, r4, r5
 80054ea:	10a4      	asrs	r4, r4, #2
 80054ec:	2600      	movs	r6, #0
 80054ee:	42a6      	cmp	r6, r4
 80054f0:	d105      	bne.n	80054fe <__libc_init_array+0x2e>
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f8:	4798      	blx	r3
 80054fa:	3601      	adds	r6, #1
 80054fc:	e7ee      	b.n	80054dc <__libc_init_array+0xc>
 80054fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005502:	4798      	blx	r3
 8005504:	3601      	adds	r6, #1
 8005506:	e7f2      	b.n	80054ee <__libc_init_array+0x1e>
 8005508:	08005694 	.word	0x08005694
 800550c:	08005694 	.word	0x08005694
 8005510:	08005694 	.word	0x08005694
 8005514:	08005698 	.word	0x08005698

08005518 <memcmp>:
 8005518:	b510      	push	{r4, lr}
 800551a:	3901      	subs	r1, #1
 800551c:	4402      	add	r2, r0
 800551e:	4290      	cmp	r0, r2
 8005520:	d101      	bne.n	8005526 <memcmp+0xe>
 8005522:	2000      	movs	r0, #0
 8005524:	e005      	b.n	8005532 <memcmp+0x1a>
 8005526:	7803      	ldrb	r3, [r0, #0]
 8005528:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800552c:	42a3      	cmp	r3, r4
 800552e:	d001      	beq.n	8005534 <memcmp+0x1c>
 8005530:	1b18      	subs	r0, r3, r4
 8005532:	bd10      	pop	{r4, pc}
 8005534:	3001      	adds	r0, #1
 8005536:	e7f2      	b.n	800551e <memcmp+0x6>

08005538 <memcpy>:
 8005538:	440a      	add	r2, r1
 800553a:	4291      	cmp	r1, r2
 800553c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005540:	d100      	bne.n	8005544 <memcpy+0xc>
 8005542:	4770      	bx	lr
 8005544:	b510      	push	{r4, lr}
 8005546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800554e:	4291      	cmp	r1, r2
 8005550:	d1f9      	bne.n	8005546 <memcpy+0xe>
 8005552:	bd10      	pop	{r4, pc}

08005554 <memset>:
 8005554:	4402      	add	r2, r0
 8005556:	4603      	mov	r3, r0
 8005558:	4293      	cmp	r3, r2
 800555a:	d100      	bne.n	800555e <memset+0xa>
 800555c:	4770      	bx	lr
 800555e:	f803 1b01 	strb.w	r1, [r3], #1
 8005562:	e7f9      	b.n	8005558 <memset+0x4>

08005564 <_init>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr

08005570 <_fini>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	bf00      	nop
 8005574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005576:	bc08      	pop	{r3}
 8005578:	469e      	mov	lr, r3
 800557a:	4770      	bx	lr
