
14_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000234  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e0  080003e8  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e0  080003e0  000103e8  2**0
                  CONTENTS
  4 .ARM          00000000  080003e0  080003e0  000103e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e0  080003e8  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e0  080003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003e4  080003e4  000103e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103e8  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001077  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002ad  00000000  00000000  0001148f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00011740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  000117b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f6d  00000000  00000000  00011808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cd2  00000000  00000000  00012775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009737d  00000000  00000000  00013447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000aa7c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c8  00000000  00000000  000aa818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003c8 	.word	0x080003c8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003c8 	.word	0x080003c8

080001ec <main>:
int timestamp = 0 ;

/* Setup : Connect a jumper wire from PA5 to PA6 */

int main (void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0


	tim2_pa5__Output_compare();
 80001f0:	f000 f814 	bl	800021c <tim2_pa5__Output_compare>
	tim3_pa6_input__capture();
 80001f4:	f000 f85e 	bl	80002b4 <tim3_pa6_input__capture>
	while(1)
	{

		/* wait until edge is captured */

		while (!(TIM3->SR & SR_CC1IF)) {}
 80001f8:	bf00      	nop
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <main+0x28>)
 80001fc:	691b      	ldr	r3, [r3, #16]
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <main+0xe>

		/* Read value */

		timestamp = TIM3->CCR1 ;
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <main+0x28>)
 8000208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800020a:	461a      	mov	r2, r3
 800020c:	4b02      	ldr	r3, [pc, #8]	; (8000218 <main+0x2c>)
 800020e:	601a      	str	r2, [r3, #0]
		while (!(TIM3->SR & SR_CC1IF)) {}
 8000210:	e7f2      	b.n	80001f8 <main+0xc>
 8000212:	bf00      	nop
 8000214:	40000400 	.word	0x40000400
 8000218:	2000001c 	.word	0x2000001c

0800021c <tim2_pa5__Output_compare>:

}


void tim2_pa5__Output_compare(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */

	RCC->AHB1ENR |= GPIOAEN;
 8000220:	4b22      	ldr	r3, [pc, #136]	; (80002ac <tim2_pa5__Output_compare+0x90>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000224:	4a21      	ldr	r2, [pc, #132]	; (80002ac <tim2_pa5__Output_compare+0x90>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set PA5 mode to alternate function */
	GPIOA->MODER &= ~(1U<<10);
 800022c:	4b20      	ldr	r3, [pc, #128]	; (80002b0 <tim2_pa5__Output_compare+0x94>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1f      	ldr	r2, [pc, #124]	; (80002b0 <tim2_pa5__Output_compare+0x94>)
 8000232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000236:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<11);
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <tim2_pa5__Output_compare+0x94>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a1c      	ldr	r2, [pc, #112]	; (80002b0 <tim2_pa5__Output_compare+0x94>)
 800023e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000242:	6013      	str	r3, [r2, #0]

	/* SER PA5 alternate function type to TIM2_CH1 (AF01) */
	GPIOA->AFR[0] |= AFR5_TIM;
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <tim2_pa5__Output_compare+0x94>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <tim2_pa5__Output_compare+0x94>)
 800024a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800024e:	6213      	str	r3, [r2, #32]


	/* Enable clock access to Timer2*/
	RCC->APB1ENR |= TIM2EN;
 8000250:	4b16      	ldr	r3, [pc, #88]	; (80002ac <tim2_pa5__Output_compare+0x90>)
 8000252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000254:	4a15      	ldr	r2, [pc, #84]	; (80002ac <tim2_pa5__Output_compare+0x90>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/

	TIM2->PSC = 1600 - 1; //  16 000 000 / 1 600 = 10 000
 800025c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000260:	f240 623f 	movw	r2, #1599	; 0x63f
 8000264:	629a      	str	r2, [r3, #40]	; 0x28

	/*set auto-reload value */
	TIM2-> ARR = 10000 - 1; // 10 000/ 10 000 = 1;
 8000266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026a:	f242 720f 	movw	r2, #9999	; 0x270f
 800026e:	62da      	str	r2, [r3, #44]	; 0x2c


	/* Set output compare toggle mode */


	TIM2->CCMR1 = OC_TOGGLE  ;
 8000270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000274:	2230      	movs	r2, #48	; 0x30
 8000276:	619a      	str	r2, [r3, #24]


	/* Enable timer2 ch1 in compare mode */

	TIM2->CCER |= CCER_CC1E;
 8000278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027c:	6a1b      	ldr	r3, [r3, #32]
 800027e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	6213      	str	r3, [r2, #32]


	/*Clear Counter*/

	TIM2->CNT = 0;
 8000288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028c:	2200      	movs	r2, #0
 800028e:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable Timer */

	TIM2->CR1 |= CR1_CEN;
 8000290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]

}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40020000 	.word	0x40020000

080002b4 <tim3_pa6_input__capture>:


void tim3_pa6_input__capture(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */

	RCC->AHB1ENR |= GPIOAEN;
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <tim3_pa6_input__capture+0x6c>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a18      	ldr	r2, [pc, #96]	; (8000320 <tim3_pa6_input__capture+0x6c>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set PA6 mode to alternate function */

	GPIOA->MODER &= ~(1U<<12);
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <tim3_pa6_input__capture+0x70>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <tim3_pa6_input__capture+0x70>)
 80002ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<13);
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <tim3_pa6_input__capture+0x70>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a13      	ldr	r2, [pc, #76]	; (8000324 <tim3_pa6_input__capture+0x70>)
 80002d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002da:	6013      	str	r3, [r2, #0]

	/* SER PA6 alternate function type to TIM2_CH1 (AF02) */

	GPIOA->AFR[0] |= AFR6_TIM;
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <tim3_pa6_input__capture+0x70>)
 80002de:	6a1b      	ldr	r3, [r3, #32]
 80002e0:	4a10      	ldr	r2, [pc, #64]	; (8000324 <tim3_pa6_input__capture+0x70>)
 80002e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002e6:	6213      	str	r3, [r2, #32]

	/* Enable clock access to Timer3*/

	RCC->APB1ENR |= TIM3EN;
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <tim3_pa6_input__capture+0x6c>)
 80002ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ec:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <tim3_pa6_input__capture+0x6c>)
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/

	TIM2->PSC = 1600 - 1; //  16 000 000 / 1 600 = 10 000
 80002f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f8:	f240 623f 	movw	r2, #1599	; 0x63f
 80002fc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Set CH1 to input capture */

	TIM3->CCMR1 = CCER_CC1S;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <tim3_pa6_input__capture+0x74>)
 8000300:	2201      	movs	r2, #1
 8000302:	619a      	str	r2, [r3, #24]

	/* Set CH1 to capture at rising edge */

	TIM3->CCER |= CCER_CC1E;
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <tim3_pa6_input__capture+0x74>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	4a07      	ldr	r2, [pc, #28]	; (8000328 <tim3_pa6_input__capture+0x74>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6213      	str	r3, [r2, #32]

	/* Enable TIM3 */

	TIM3-> CR1 = CR1_CEN;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <tim3_pa6_input__capture+0x74>)
 8000312:	2201      	movs	r2, #1
 8000314:	601a      	str	r2, [r3, #0]


}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40023800 	.word	0x40023800
 8000324:	40020000 	.word	0x40020000
 8000328:	40000400 	.word	0x40000400

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000330:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	; (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f000 f811 	bl	8000380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff45 	bl	80001ec <main>

08000362 <LoopForever>:

LoopForever:
    b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000370:	080003e8 	.word	0x080003e8
  ldr r2, =_sbss
 8000374:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000378:	20000020 	.word	0x20000020

0800037c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC_IRQHandler>
	...

08000380 <__libc_init_array>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	4d0d      	ldr	r5, [pc, #52]	; (80003b8 <__libc_init_array+0x38>)
 8000384:	4c0d      	ldr	r4, [pc, #52]	; (80003bc <__libc_init_array+0x3c>)
 8000386:	1b64      	subs	r4, r4, r5
 8000388:	10a4      	asrs	r4, r4, #2
 800038a:	2600      	movs	r6, #0
 800038c:	42a6      	cmp	r6, r4
 800038e:	d109      	bne.n	80003a4 <__libc_init_array+0x24>
 8000390:	4d0b      	ldr	r5, [pc, #44]	; (80003c0 <__libc_init_array+0x40>)
 8000392:	4c0c      	ldr	r4, [pc, #48]	; (80003c4 <__libc_init_array+0x44>)
 8000394:	f000 f818 	bl	80003c8 <_init>
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	10a4      	asrs	r4, r4, #2
 800039c:	2600      	movs	r6, #0
 800039e:	42a6      	cmp	r6, r4
 80003a0:	d105      	bne.n	80003ae <__libc_init_array+0x2e>
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a8:	4798      	blx	r3
 80003aa:	3601      	adds	r6, #1
 80003ac:	e7ee      	b.n	800038c <__libc_init_array+0xc>
 80003ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b2:	4798      	blx	r3
 80003b4:	3601      	adds	r6, #1
 80003b6:	e7f2      	b.n	800039e <__libc_init_array+0x1e>
 80003b8:	080003e0 	.word	0x080003e0
 80003bc:	080003e0 	.word	0x080003e0
 80003c0:	080003e0 	.word	0x080003e0
 80003c4:	080003e4 	.word	0x080003e4

080003c8 <_init>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr

080003d4 <_fini>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr
